var roomName = 'üçÅ Pro-League Arenas | X3 üçÅ FLASH'
var room = HBInit({
    roomName: roomName,
    maxPlayers: 30,
    public: true,
    noPlayer: true,
    token: 'thr1.AAAAAGeIMSQezwavWQbgXQ.ocfzBjxJu-c',
    geo : {"code": 'BR', "lat":  -23, "lon": -47.312550298},//{"lat":-19.800000, "lon":-50.800000,"code":"br"}
})


var timeLimit = 1;
var scoreLimit = 1;

var bloquear_comando = []; 

var errocor = 0xFF0000 
var successColor = 0x00FF00; 

var blacklist = [{Auth: "", Conn: "", ipv4: ""}, {Auth: "", Conn: "", ipv4: ""}];

var statNameTranslation = {
    'games': 'Jogos',
    'wins': 'Vit√≥rias',
	'winrate': 'Taxa De Vit√≥ria',
    'goals': 'Gols',
    'assist': 'Assistencias',
    'ownGoals': 'Gols Contras',
}
var commandStatNameTranslation = {
	jogos: "games",
	vitorias: "wins",
	gols: "goals",
	assistencias: "assists",
	cs: "cs"
};


let capit√£o = false
let prefixTeamChatString = "!t ";
let palavras = ["macaco", "preto", "nazista", "nazismo","primata", "negro", "piche de asfalto", "gay", "viadinho", "puta", "mamaco", "preto"],
regex = new RegExp(palavras.join("|"), 'gi');
let provocacoes = '!ali, !arn, !atk, !band, !bnh, !bnh2, !bnh3, !cag, !calc, !cham, !chu, !cff, !cru, !dboa, !dboa2, !def, !dig, !dmr, !faz, !fal, !f√©, !fe, !fran, !fran2, !frio, !fru, !gira, !gl√ß, !grl, !gol, !hum, !ini, !lad, !l√ß,  !mar,  !olho, !olhu, !p√ß, !pick, !pint, !pip, !proi, !ptz, !qdf, !qbl, !qjo, !qgo, !qse, !rcl, !rpz, !rvz, !sai, !sac, !sap, !sdg, !ski, !siu, !taf, !tira, !tnc, !ui, !ui2, !uu, !vira, !volt, !vl, !x, !zag, !zen, !divisao, !quentin, !logica, !base, !meto2, !boa, !bai, !bag, !bike, !bch, !bpa, !brb, !cal, !fome, !fds, !jlu, !itk, !fzl, !gen, !kk, !lae, !mal, !mal2, !mal3, !mds, !nice, !trave, !puskas, !bolso, !pika, !papai, !seupai, !peganunca, !quentin2, !izi, !piden, !qsl, !system, !oi, !toma, !ifood, !chute, !moscou, !chora, !red, !blue, !paired, !paiblue, !pegala, !perdoa, !perdoa2, !receba, !meto, !pega, !toca2, !toca, !gk2, !gk3, !gk4, !gk5, !bobiu, !oe'

let categorias = 'Categorias de uniformes: !selecoes, !brasileiros, !outros, !estrangeiros, !vipuni'
let selecoes = 'Sele√ß√µes: !bra, !ale, !arg, !hol, !eua, !fra, !por, !egi, !uru, !ru, !marro, !mona, !esp, !ara, !afeg, !alb, !arg√©, !mex, !csul, !croa'
let brasileiros = 'Obs: Alguns unis possuem at√© 3 op√ß√µes, exemplo: !bah, !bah2, !bah3\nS√©rie A: !cam, !cap, !amg,  !bah, !bot, !cor, !corit, !cru, !cui, !fla, !flu, !fort, !goi, !int, !gre, !pal, !brag, !san, !sp, !vas\nS√©rie B: !sam, !cha, !rec, !vit, !cea, !abc, !ava, !vila, !lond, !itu, !acg, !tom, !botsp, !crb, !cri, !gua, !juv, !mir, !nov, !pont\nS√©rie C: !pay, !csa, !mana, !alt, !ama, !ame, !apa, !botpb, !bru, !conf, !fig, !flo, !nau, !ope, !pou, !rem, !sb, !sj, !vr, !ypi\nS√©rie D: !trem, !tocan, !santc, !glo, !alago, !brasil, !andre, !ferro, !brapel'
let outros =  'Outros: !pr, !ibis'
let estrangeiros = 'Estrangeiros: !mcy, !bay, !intm, !mil, !chel, !bar, !rm, !boru, !liv, !psg, !bdm, !juve, !alhi, !alah, !alna, !bj, !inde, !pen, !riv, !tig, !atl, !estre, !feye, !estu, !olim, !raci, !vele, !ars'
let vipuni = 'Vips: !xesn, !gg, !wp, !sev, !two, !on, !faz, !faz2, !faz3, !faz4'

var uniVIP = {'!xesn': [0, 0xFFFFFF, [0x000000, 0xFF9305, 0x000000]],
'!gg': [60, 0xF7F7F7, [0xC2C2C2, 0xA8A8A8, 0x8C8C8C]],
'!wp': [60, 0x82FFFF, [0x0CBDC9, 0x0A9EA8, 0x07757D]],
'!sev': [50, 0x9C971A, [0x292929, 0x141414, 0x080808]],
'!two': [50, 0x000000, [0xCE93FC, 0xA173C4, 0x7E5A99]],
'!on': [0, 0x15FF0D, [0x000000]],
'!faz': [60, 0xFF5D52, [0XFF0000, 0XCC0000, 0XA10000]], 
'!faz2': [60, 0xA39043, [0xFFE169, 0xE6CB5F, 0xD9C059]],
'!faz3': [60, 0x295BFF, [0x1600D4, 0x1200B3, 0x0F0091]],
'!faz4': [90, 0xD1FFBD, [0xD69004, 0x16960D, 0xD10000]]};

var uniList = {
        //Selecoes
        '!bra': [90, 0x40BFFF, [0xFFE600]],
        '!bra2': [90, 0x00CF00, [0x002AFF]],
        '!bra3': [60, 0x1FC90C, [0xF8FF1F]],
        '!ale': [90, 0xFFFFFF, [0x000000, 0xFF1212, 0xFFDD00]],
        '!ale2': [90, 0x3D3D3D, [0x171717]],
        '!ale3': [0, 0xFFFAFA, [0x000000, 0xFF0000, 0xFFA500]],
        '!hol': [60, 0x000000, [0xFF5E00]],
        '!hol2': [60, 0xFF5E00, [0x001347]],
        '!eua': [-40, 0xFFFFFF, [0x001347, 0xFF1C1C, 0x001347]],
        '!eua2': [-40, 0xFFFFFF, [0x001347, 0x1B1296]],
        '!arg': [180, 0x000000, [0xFFFFFF, 0x0099FF, 0xFFFFFF]],
        '!arg2': [90, 0xFFFFFF, [0x2D0059, 0xC300FF]],
        '!fra': [90, 0xFFFFFF, [0x000959, 0xFF121A, 0x000959]],
        '!fra2': [90, 0xFFB94F, [0x000959]],
        '!fra3': [0, 0x05009E, [0x000061, 0xFFFFFF, 0xFF0800]],
        '!por': [-45, 0xFFF700, [0x165200, 0xC20808]],
        '!por2': [90, 0xFFFF00, [0xF00000]],
        '!por3': [90, 0xEB0000, [0xFFFFFF]],
        '!egi': [60, 0xFFFFFF, [0xF70000]],
        '!egi2': [60, 0x000000, [0xFFFFFF]],
        '!uru': [60, 0x000000, [0x0D9EFF]],
        '!ru': [90, 0xFFFFFF, [0x750000, 0xCF0808, 0xCF0808]],
        '!ru2': [90, 0x000000, [0x1E0A82, 0xFFFFFF, 0xFFFFFF]],
        '!ara': [90, 0x095E00, [0xFFFFFF]],
        '!ara2': [90, 0xFFFFFF, [0x006600, 0x009E00, 0x00E300F]],
        '!marro': [90, 0x000000, [0xDB0000, 0xFFFFFF, 0xFFFFFF]],
        '!marro2': [90, 0xFFFFFF, [0xE30000, 0x007A1C, 0x007A1C]],
        '!mona': [240, 0x000000, [0xFFFFFF, 0xFFFFFF, 0xFF3030]],
        '!esp': [90, 0x000000, [0xFF0000, 0xFFFF00, 0xFF0000]],
        '!esp2': [0, 0xFFFFFF, [0xFF2403, 0xFF0000, 0xFF0000]],
        '!esp3': [90, 0xEB0000, [0xE6E6E6, 0xE3E3E3, 0xE9E9E9]],
        '!afeg' : [0, 0xFFFFFF, [0x000000, 0xC70A0A, 0x055716]], //Afeganist√£o
        '!alb' : [0, 0x000000, [0xD10000]], //Alb√¢nia
        '!arg√©' : [0, 0xC40000, [0x086E1C, 0xFFFFFF]], //Arg√©lia
        '!mex' : [0, 0xFFFFFF, [0x094A02]], //M√©xico
        '!csul' : [0, 0x000000, [0xFA0019]], //Coreia do Sul
        '!croa' : [0, 0xFF0022, [0x000000, 0x061219, 0x000000]], //Croacia

        //S√©rie A
        '!sp': [0, 0x000000, [0x900000, 0xFFFFFF, 0x000000]],
        '!sp2': [90, 0xFF0000, [0xFFFFFF]],
        '!cap': [45, 0xFAFAFA, [0xC90000, 0x000000, 0xC90000]],
        '!cap2': [40, 0xFFFFFF, [0x8B0B0A, 0x1D1D1D, 0x8B0B0A]],
        '!cap3': [40, 0xB4332D, [0xC4C7CE, 0x0E111A, 0xC4C7CE]],
        '!cap4': [240, 0xFFFFFF, [0x0C0A0F, 0x19161D]],
        '!cam': [0, 0xFF0000, [0x000000, 0xFFFFFF, 0x000000]],
        '!bah': [0, 0xFAFAFA, [0x2908FF, 0xFF0000, 0x2908FF]], //bahia
        '!bah2': [0, 0xFFFFFF, [0x03173C, 0xA51B28, 0x03173C]],
        '!bah3': [40, 0xFFEDDB, [0x21A3D5, 0x21A3D5, 0xBFC0C2]],
        '!fla': [90, 0xFFFFFF, [0xFF0000, 0x000000, 0xFF0000]],
        '!fla2': [90, 0xF5F5F5, [0x000000, 0xA61100, 0x000000]],
        '!cui': [90, 0xFFFFFF, [0xF8F23C, 0x06783C, 0xF8F23C]], //cuiaba
        '!cui2': [60, 0x007F35, [0xEDEEF0, 0xFBDC05, 0xEDEEF0]],
        '!cui3': [60, 0xFFEC7A, [0x60D07A, 0x419D46]],
        '!cru': [90, 0x000000, [0x1515B0]],
        '!cru2': [0, 0xFFFFFF, [0x0600A6]],
        '!cru3': [60, 0xFFFFFF, [0x0063C4, 0x0063C4, 0x0063C4]],
        '!cor': [90, 0x292929, [0xFAFAFA]],
        '!cor2': [90, 0xFFFFFF, [0x1b1c1e]],
        '!corit': [0, 0x0C3B00, [0xFFFFFF, 0x039420, 0xFFFFFF]],
        '!fort': [90, 0xFAFAFA, [0x0B2CBD, 0xD61020, 0x0B2CBD]],
        '!vas': [53, 0xFF0000, [0xFAFAFA, 0x000000, 0xFAFAFA]],
        '!vas2': [53, 0xFF0000, [0x000000, 0xFAFAFA, 0x000000]],
        '!pal': [53, 0xFFFFFF, [0x1D3825]], //palmeiras
        '!pal2': [60, 0x05504C, [0xFFFFFF]],
        '!pal3': [60, 0xEFDD21, [0x7EE3AB]],
        '!pal4': [0, 0xFFFFFD, [0x466329, 0xF0F0F2, 0x466329]],
        '!brag': [0, 0xFF0000, [0xFAFAFA]],
        '!cap2': [56, 0xFFFFFF, [0xFF2121, 0x262626, 0xFF2121]],
        '!flu': [180, 0xFFFFFF, [0x1D3825, 0x961400, 0x1D3825]],
        '!flu2': [0, 0xFAFAFA, [0x0D8267, 0x891021, 0x0D8267]],
        '!bot': [180, 0xFFFFFF, [0x000000,0x262626,0x000000]],
        '!bot2': [0, 0x404040, [0x000000, 0xFFFFFF, 0x000000]],
        '!san': [180, 0xFFFFFF, [0x007E87]],
        '!san2': [0, 0x000000, [0xFFFFFF]],
        '!san3': [0, 0xB0B0B0, [0xFAFAFA, 0x101010, 0xFAFAFA]],
        '!goi': [90, 0xFAFAFA, [0x164535]], //goias
        '!goi2': [0, 0xDFE2F1, [0x02424B, 0x047386, 0x02424B]],
        '!goi3': [270, 0x023A47, [0xEDEEF3, 0xEDEEF3, 0x2B515A]],
        '!goi4': [60, 0x01CF4A, [0x0F2A28, 0x0F2A28, 0x0F2A28]],
        '!int': [90, 0xFAFAFA, [0xC90000, 0x990000, 0xC90000]],
        '!gre': [0, 0xFFFFFF, [0x75ACFF, 0x000000, 0x75ACFF]],
        '!amg': [0, 0xFFFFFF, [0x109600, 0x000000, 0x109600]],
        '!amg2': [180, 0x0044FF, [0xFFEDED, 0xFF0D0D]],
        '!amg3': [180, 0xFF00E6, [0x00083B]],

        //S√©rie B
        '!sam': [0, 0x000000, [0xDE0000, 0xFFF700, 0x156B00]], //Sampaio Correia
        '!cha': [0, 0xFAFAFA, [0x007A00, 0x005406, 0x007A00]],
        '!rec': [90, 0xFFFFFF, [0xB30000, 0x000000, 0xB30000]],
        '!vit': [90, 0xFFFFFF, [0xFF0000, 0x000000, 0xFF0000]],
        '!cea': [0, 0x000078, [0x000000, 0xFFFFFF, 0x000000]],
        '!vila': [0, 0xFFFFFF, [0xDE0000]], //Vila Nova
        '!lond': [0, 0x18181A, [0xF5F4EF, 0xA0D9ED, 0xF5F4EF]], //Londrina 
        '!lond2': [60, 0x5DB8E7, [0x182B53, 0x182B53, 0x3D78BC]],
        '!itu': [0, 0xFFFFFF, [0x262138, 0xE6414F, 0x262138]], //Ituano
        '!itu2': [60, 0xB73B53, [0xDEE6F9, 0xCAD4F7]],
        '!acg': [60, 0xFFFFFF, [0xCE323F, 0x192A31, 0xCE323F]], //Atl√©tico Goianiense
        '!acg2': [60, 0x282828, [0xE7E7E7, 0xE64844, 0xE7E7E7]],
        '!acg3': [40, 0xE3E3E3, [0x060606, 0xC10506, 0x060606]],
        '!tom': [60, 0xFF1C1C, [0xE8ECEF, 0xE8ECEF, 0xD1DCD6]], //Tombense
        '!tom2': [60, 0x383838, [0xBE0000, 0xECECEE,  0xBE0000]],
        '!tom3': [0, 0x908F95, [0xB40830, 0xEEEFF3]],
        '!botsp': [90, 0xEAE5EC, [0x000706, 0x85B9D1, 0x85B9D1]], //Botafogo-SP
        '!botsp2': [0, 0xFFFFFF, [0x171111, 0xFF5B52, 0x171111]],
        '!botsp3': [90, 0xEED717, [0xDB1023, 0xEDE5E2, 0x242021]],
        '!crb': [90, 0xFF0000, [0xA80017, 0xFEFEFE]], //CRB
        '!crb2': [90, 0x2A0403, [0xFB2E3F, 0xEDE5E3, 0xFB2E3F]],
        '!crb3': [0, 0xEFFDFE, [0x030303, 0x3E3A51, 0x030303]],
        '!abc': [60, 0x010101, [0xBDCCEB, 0x374049, 0xBDCCEB]], //ABC
        '!abc2': [0, 0x1A191E, [0x515561, 0xAEB1C2, 0x505364]],
        '!ava': [0, 0x053364, [0x024D90, 0xDEDDE2, 0x024D90]], //Ava√≠
        '!ava2': [90, 0x6FA7CA, [0x004B9E, 0xE6EEF0, 0xE6EEF0]],
        '!cri': [90, 0xFFFFFF, [0xE4C918, 0x0E0E0E, 0xD9D9D9]], //Crici√∫ma
        '!cri2': [90, 0xE0C111, [0x000000, 0xECECEC, 0xECECEC]],
        '!cri3': [0, 0xFFFFFF, [0xDDA510, 0x000000, 0xDDA510]],
        '!gua': [0, 0xFFFFFF, [0x095A53, 0x014842]], //Guarani
        '!gua2': [90, 0x12614C, [0xF4F0EF, 0xF4F0EF, 0x138762]],
        '!gua3': [0, 0xFFFFFF, [0x03C263, 0x004A2F, 0x03C263]],
        '!juv': [0, 0xFFFFFF, [0x0D8E4E, 0xD9D0D1, 0x0D8E4E]], //Juventude
        '!juv2': [120, 0x0BC892, [0xDAD7E8, 0xDAD7E8, 0x289079]],
        '!juv3': [40, 0x8DE342, [0x07060C, 0x07060C, 0x22EB77]],
        '!mir': [60, 0x084334, [0xFFE81C]], // Mirassol
        '!mir2': [60, 0xFFFFFF, [0x1D4840, 0xEFC209, 0x1D4840]],
        '!mir3': [270, 0xBBA242, [0x2A426E]],
        '!nov': [0, 0xFFFFFF, [0xF2B855, 0x1B1C2E, 0xF2B855]], //Novorizontino
        '!nov2': [90, 0x312C3E, [0xC8CDF7, 0xE7AB42]],
        '!nov3': [0, 0xFFFFFF, [0x0C0912, 0xF5EB55, 0x0C0912]],
        '!pont': [40, 0xFFFFFF, [0xD4CED2, 0x02000E, 0xD4CED2]], // Ponte Preta
        '!pont2': [40, 0x000000, [0x1A1227, 0xD9D0D5, 0x1A1227]],
        '!pont3': [40, 0xFFFFFF, [0xCED3D6, 0x575C5F, 0x010302]],

        //S√©rie C
        '!pay': [90, 0x7AF2FF, [0x006FFF, 0x2E9DFF, 0x70B3FF]],
        '!csa': [0, 0x050505, [0x1704C4, 0xFFFFFF, 0x0A22C2]], //CSA
        '!mana': [180, 0xFFFFFF, [0x18AB53, 0x0E7746, 0x18AB53]], //Manaus FC
        '!alt': [90, 0xD0A53F, [0x284E41, 0xD0D4ED, 0x284E41]], //Altos
        '!alt2': [40, 0xFFFF00, [0xEEF0F2, 0x036136, 0xEEF0F2]],
        '!alt3': [0, 0x2B875A, [0x000009, 0x051A6A, 0x000009]],
        '!ama': [60, 0x030100, [0xEEB72F]], //Amazonas
        '!ama2': [60, 0xFCEB00, [0x020000]],
        '!ama3': [60, 0xFAC208, [0xF6F6F6]],
        '!ame': [270, 0xFDFDFF, [0xE90216, 0xFC0A20]], //Am√©rica de Natal
        '!ame2': [60, 0xB7040A, [0xF2F2F2]],
        '!ame3': [90, 0xA02B3E, [0x32435D, 0xE4CBAD, 0x32435D]],
        '!apa': [90, 0xB0983E, [0x172238, 0x192A48]], //Aparecidense
        '!apa2': [60, 0x24324F, [0xB9BCDF]],
        '!apa3': [60, 0xE0D2A1, [0x2A3144, 0x2A3144, 0x2862AC]],
        '!botpb': [0, 0xD40D12, [0x2E2331, 0xE6EDF5, 0x2E2331]], //Botafogo PB
        '!botpb2': [60, 0x000000, [0xE6E6E8, 0xD1D1D9]],
        '!botpb3': [60, 0xD4E0EC, [0x050505]],
        '!bru': [90, 0xFFFF00, [0xC71721, 0x00893B, 0xE1E1E1]], //Brusque
        '!bru2': [70, 0x130C06, [0x045743, 0xBF2A30, 0xCBBB10]],
        '!bru3': [0, 0xFFFFFF, [0x313D49, 0x171A21]],
        '!conf': [90, 0xFFFFFF, [0x1F4097, 0x1F4097, 0xF8F0F7]], //Confian√ßa
        '!conf2': [0, 0x0080FF, [0xFFFFFF, 0xFFFFFF, 0x0C1050]],
        '!conf3': [0, 0xFFFFFF, [0x03C0F8, 0x5CC4CD, 0x8BCDC9]],
        '!fig': [0, 0x000000, [0x222222, 0xE2E2E2, 0x222222]], //Figueirense
        '!fig2': [90, 0x0F1110, [0xEDEEF5, 0xEDEEF5, 0x161A1E]],
        '!fig3': [60, 0xE7A73D, [0x020000]],
        '!flo': [0, 0xFFFFFF, [0x2A5D4A, 0x5DC68D, 0x2A5D4A]], //Floresta
        '!flo2': [0, 0x2B6A57, [0xF2F0FD, 0x30A669, 0xF2F0FD]],
        '!flo3': [0, 0x15191A, [0x2DCCC7, 0x04AEAD]],
        '!nau': [0, 0xFF1414, [0xC10100, 0xDEE2E3, 0xC10100]], //N√°utico
        '!nau2': [60, 0xCE2034 [0xE2E4F6]],
        '!nau3': [0, 0xFFFFFF, [0xE91A22, 0xE20D11]],
        '!ope': [0, 0x000000, [0x131517, 0xF7F6F9, 0x131517]], //Oper√°rio PR
        '!ope2': [60, 0x000000, [0xFEFEFE]],
        '!ope3': [40, 0x5B595A, [0x020202, 0xF1F1F1]],
        '!pou': [40, 0xFFFFFF, [0xDAD3CB, 0xCA0415, 0x100E0F]], //Pouso Alegre
        '!pou2': [0, 0xFFFFFF, [0xBF1F11, 0x1A1617, 0xBF1F11]],
        '!pou3': [90, 0xFFFFFF, [0xCC3F52, 0x000000, 0x000000]],
        '!rem': [60, 0xFFFFFF, [0x191828]], //Remo
        '!rem2': [60, 0x232639, [0xDCDCDC]],
        '!rem3': [0, 0xF2F2F2, [0x0E0E0E, 0x362035, 0x0E0E0E]],
        '!sb': [60, 0xF1CD37, [0x0F0F0F]], //S√£o Bernado
        '!sb2': [60, 0x101010, [0xDCA63C]],
        '!sb3': [270, 0xEBC630, [0xE3DEE5, 0xE3DEE5, 0x26272B]],
        '!sj': [60, 0xD8DDCE, [0x201A79]], //S√£o Jos√© RS
        '!sj2': [60, 0x2413A6, [0xEAF7F0]],
        '!sj3': [90, 0x091646, [0xE6C63F, 0xE1BF30]],
        '!vr': [0, 0xFFF7F7, [0xFECB18, 0x232428, 0xFECB18]], //Volta Redonda
        '!vr2': [64, 0x000000, [0xF5DD00, 0xDBC500, 0xCCB800]],
        '!vr3': [64, 0x41DB00, [0x141414, 0x191919, 0x212121]],
        '!vr2': [0, 0x20232D, [0xFFFFFF, 0xCCC9CD, 0xF7F5F5]],
        '!vr3': [90, 0xFFFFFF, [0xFEF600, 0x000000, 0x000000]],
        '!ypi': [60, 0x005238, [0xFEE600]], //Ypiranga de Erechim
        '!ypi2': [60, 0xFFFFFF, [0x00704F]],
        '!ypi3': [0, 0x5A6794, [0xC0DAE9, 0x68A4C8]], 

        //S√©rie D
        '!trem': [90, 0xF3F8F4, [0xFF0018, 0x2F2929, 0xFF0018]],//Trem Desportivo
        '!trem2': [0, 0xD9D7D8, [0x0F161E, 0xC6001A]],
        '!tocan': [60, 0xF2F3EE, [0x4C9E65]],//Tocantin√≥polis
        '!tocan2': [60, 0x77C977, [0xFCFEFB]],
        '!santc': [90, 0xFFFFFF, [0x050409, 0xCA2E3B]],//Santa Cruz
        '!santc2': [90, 0x181B2A, [0xF1F2F7, 0xE04447]],
        '!glo': [90, 0xFFFFFF, [0xCD455B, 0x171516]],//Globo
        '!glo2': [90, 0xFFFFFF, [0x000000, 0x621825, 0xA27615]],
        '!alago': [0, 0xEDEDED, [0x232832, 0xBF3443]],//Atl√©tico de Alagoinhas
        '!alago2': [90, 0xFFFFFF, [0x121116, 0x980611]],
        '!alago3': [60, 0xD2C76D, [0x0E0F14]],
        '!brasi': [0, 0x1C6A12, [0xEA9A01, 0xEA9A01, 0xE7E7E7]],//Brasiliense
        '!brasi2': [60, 0xFCFA05, [0x0D0B18]],
        '!andre': [60, 0x112379, [0xE4E7EE]],//Santo Andr√©
        '!andre2': [230, 0xE9EBE6, [0x1633B5, 0x22245D]],
        '!ferro': [60, 0xEEF2FB, [0x412B2E]],//Ferrovi√°ria
        '!ferro2': [60, 0x432A2E, [0xEDF3F3]],
        '!brapel': [60, 0x454648, [0xF57582]],//Brasil de Pelotas
        '!brapel2': [45, 0xFCFCFC, [0xBD2232, 0x111113]],

        //Outros
        '!pr': [0, 0xFFFFFF, [0xE30000, 0x0006BF]],
        '!ibis': [90, 0xDADFE3, [0x332C34, 0x822A38, 0xE13F4C]], //Ibis
        '!ibis2': [90, 0xFFFFFF, [0x000000, 0x8C0000, 0xC90000]],

        //Estrangeiros
        '!atl4': [180, 0x333333,[0xFAEDED, 0x000000]],
        '!juve': [180, 0xFFFFFF, [0x000000]],
        '!psg': [60, 0xFFFFFF, [0x001C38]],
        '!psg2': [60, 0x000000, [0x6000A1, 0xFF00FF]],
        '!bdm': [1, 0xFFF0F0, [0xFF0000]],
        '!bdm2': [1, 0xFFC403, [0x000000]],
        '!liv': [180, 0xEBEBEB, [0x630024]],
        '!liv2': [1, 0x700000, [0x252633]],
        '!liv3': [60, 0xFEFEFC, [0xEC2637]],
        '!liv4': [60, 0x141517, [0xE5E0E6]],
        '!rm': [0, 0xDAA520, [0xFFFAFA, 0xFFFAFA, 0xFFFAFA]],
        '!rm2': [180, 0xFFFFFF, [0x000000]],   
        '!rm3': [180, 0x7DA8FF, [0x002078]],     
        '!rm4': [132, 0xFFCD45, [0xFFFFFF, 0x004077, 0xFFFFFF]],
        '!bar': [0, 0xFFC44F, [0x050047, 0xB30000, 0x050047]],
        '!bar2': [0, 0xDEB405, [0xA2214B, 0x00529F]],
        '!mcy': [180, 0x060336, [0x0F8FFF]],
        '!chel': [90, 0xFFFFFF, [0x0000CD, 0x00008B, 0x0000CD]],
        '!mil': [180, 0xFFFFFF, [0x000000, 0xFF0000, 0x000000]],
        '!boru': [90, 0x000000, [0xEEEE00, 0xFFFF00, 0xFFFF00]],
        '!bay': [30, 0xFAF31E, [0xFF0000, 0xF20000, 0xE00000]],
        '!intm': [0, 0xFFFFFF, [0x000000, 0x4169E1, 0x000000]],
        '!alhi': [0, 0xFEFEFE, [0x191AA6, 0x100D5C]], //al Hilal
        '!alhi2': [60, 0x15215B, [0xD8D8D8]],
        '!alhi3': [0, 0xF8F8F8, [0x0761CF, 0x034486, 0x0761CF]],
        '!alhi4': [60, 0x083964, [0xFEFEFE]],
        '!alah': [90, 0xFFFFFF, [0xC2011C, 0xC8031F]], //Al Ahly
        '!alah2': [50, 0xFFFFFF, [0x2F3035, 0x2F3035, 0xE4EDF6]],
        '!alna': [60, 0x233FA2, [0xE9DF03, 0xE9DF03, 0x173190]], //Al Nassr
        '!alna2': [60, 0xFEF262, [0x1C3553, 0x2E557E]],
        '!bj': [90, 0x000000, [0x063784, 0xF2E200, 0x063784]], //Boca Juniors
        '!bj2': [90, 0xFAD517, [0xF3F5F9, 0x212749, 0xF3F5F9]],
        '!inde': [0, 0xFFFFFF, [0x19191B, 0x0C1019, 0x19191B]], //Independiente del Valle
        '!inde2': [60, 0xFFFFFF, [0xBD2E5C]],
        '!pen': [0, 0xFFFFFF, [0x302D33, 0xE8BF52, 0x302D33]], //Pe√±arol
        '!pen2': [60, 0xF6CC08, [0x9091A5]],
        '!riv': [40, 0x2C2827, [0xE3E1E2, 0xC03C3B, 0xE3E1E2]], //River Plate
        '!riv2': [90, 0xFFFFFF, [0xC80316, 0xC80316, 0xE3E2E7]],
        '!tig': [90, 0xFFFFFF, [0xFEB938, 0x0B3364, 0xFEB938]], //Tigres
        '!tig2': [50, 0xBDCEEF, [0x3069BD, 0x5B91DA, 0x3069BD]],
        '!estre': [90, 0xE8B502, [0xFD021E, 0xFEF2F4, 0xFD021E]], //Estrela Vermelha
        '!estre2': [130, 0x05080A, [0xF3EEEB, 0xE23D21, 0xF3EEEB]],
        '!feye': [0, 0x433D3D, [0xD91914, 0xE9E4E8]], //Feyenoord
        '!feye2': [60, 0xE8EDF1, [0x076186]],
        '!estu': [0, 0x0C0C0C, [0xC01319, 0xF5FBF1, 0xC01319]], //Estudiantes
        '!estu2': [90, 0xE31B1D, [0xFFFFFF, 0xFFFFFF, 0xFF0000]],
        '!olim': [90, 0xFFFFFF, [0xF8F9FD, 0x32353A, 0xF8F9FD]], //Olimpia
        '!olim2': [90, 0x141416, [0x090C13, 0xF5F5F5, 0x090C13]],
        '!raci': [90, 0x201D20, [0x4789B5, 0xD7D3CE, 0xD7D3CE]], //Racing
        '!raci2': [0, 0xECECF0, [0x1C1A1B, 0x5299C1, 0x1C1A1B]],
        '!vele': [130, 0x242843, [0xDCE1F4, 0x04419C, 0xDCE1F4]], //V√©lez Sarsfield
        '!vele2': [130, 0x242843, [0x02318D, 0xE1E1E3, 0x02318D]],
        '!ars': [226, 0xFFFFFF, [0xFFFFFF, 0x9E0000, 0xCF0000]], //Arsenal
        '!ars2': [226, 0xFFDF00, [0x9E0000, 0x9E0000, 0x9E0000]],
/* 
         !ice /colors red 90 FFFFFF FFA8F1 FFA8F1 FFA8F1
        vip
        !sky
        /colors red 60 D1D1D1 82C5FF 82C5FF 82C5FF 
        (vip)
        /colors red 60 D1C786 FFFFFF FAFAFA FCFCFC
        !gold (vip) 
        // rosinha/vip barbie cyt /colors red 56 FFFFFF FFA8FF FFD1F9 DAB6DB

        90 FFFFFF FF0000 //adblock
        90 FFFFFF 086BFF //volkswagen 
        90 FFF836 FF0A12 //donalds 
        90 9C9C9C FFFFFF //iphone logo
        90 FFFFFF FF0000 0089FF //Casas Bahia 
        17 00FF4C 000305 //spotify
        60 00FFE5 FFFFFF 000000 DE0253 //Tik Tok
CAMISA DO ZAP FML
/colors red 60 FFFFFF 0FE300
CAMISA DO YOUTUBE
/colors red 60 FFFFFF E30000
Uniforme Hetero kkk
/colors red 90 FFFFFF 000000 636363 FFFFFF
Camisa do ROBLOX kkkkkk
/colors red 61 B0B0B0 000000
Uniforme Reddit
/colors red 61 FFFFFF ED6F00
Uniforme Facebook
/colors red 61 FFFFFF 006FFF

        */
}

var provos = {
        '!ali': 'Alisa meu pelo üêÜ',
        '!arn': 'Pode isso, Arnaldo? ü§î',
        '!atk': 'Ataca!!! üí™',
        '!band': 'A bandeirinha √© minha amiga üèÅüòú',
        '!bnh': 'S√≥ na banheira? üõÄ',
        '!bnh2': 'T√° no ataque ou no banho? üöø',
        '!bnh3': '√Äs vezes a banheira d√° certo... üå¨Ô∏è',
        '!cag': 'Cagada üí©',
        '!calc': 'üìäüìê‚ùå‚ûïüìö‚ûó = Calculado',
        '!cham': 'Chama üî•',
        '!chu': 'Chuta!! üëü',
        '!cff': 'Chuta fofo üë∂',
        '!cru': 'Cruza! üëÜ',
        '!dboa': 'De boa ü§ô',
        '!dboa2': 'Eita como ele t√° de boa ü§ô',
        '!def': 'Defende!!! ‚úä',
        '!dig': 'Digita mais ü§ì',
        '!dmr': 'Demora mais!!! üôÑ',
        '!faz': 'Faz... ü§≤',
        '!fal': 'Foi falta!! üöë',
        '!f√©': 'Com f√© no p√©! ü¶∂',
        '!fe': 'Com f√© no p√©! ü¶∂',
        '!fran': 'Frango! üêî',
        '!fran2': 'Franguei üêì',
        '!frio': 'Frio ü•∂',
        '!fru': 'Mustela putorius furo, o Fur√£o! ü¶¶',
        '!gira': 'Gira a bola! ü§π‚Äç‚ôÇÔ∏è',
        '!gl√ß': 'Que gola√ßo! ‚öΩ ',
        '!grl': 'Gorila √© sinistro ü¶ç',
        '!gol': 'GOOOOOOOOOOL ‚öΩÔ∏è',
        '!hum': 'Humilde ü•∫',
        '!ini': 'Inimigo do gol! üëπ',
        '!lad': 'Ladr√£o! üò†', 
        '!l√ß': 'LA√áO üéÄ',  
        '!mar': 'Marca! ü§º‚Äç‚ôÇÔ∏è', 
        '!olho': 'Olho no lance! üëÅÔ∏è', 
        '!olhu': 'OLHUGOL, OLHUGOL ü•Ö',
        '!p√ß': 'Pa√ße ü¶µ',
        '!pick': 'Pickford! üôå',
        '!pint': 'Uma pintura!! üë®‚Äçüé®üñºÔ∏è',
        '!pip': 'Olha a pipoca! üçø',
        '!proi': 'Proibido fazer gol!! üö´',
        '!ptz': 'Putz... ü§¶',
        '!qdf': 'Que defesa! üôå',
        '!qbl': 'Que bol√£o! üéØ ',
        '!qjo': 'Que jogada! üëå ',
        '!qgo': 'Que gola√ßo! ‚öΩ ',
        '!qse': 'Quase erra üòÜ',
        '!rcl': 'Esse a√≠ s√≥ reclama!! ü§®',
        '!rpz': 'Rapaz... üê≠',
        '!rvz': 'Reveza GK! üîÑ',
        '!sai': 'S√≥ tem uma bola. Precisa de mais de um jogador em cima? SAI! üò§',
        '!sac': 'Sacanagem... üò≠',
        '!sap': 'Que sapatada!!! ü•æ',
        '!sdg': 'Sai do gol, GK!!!',
        '!ski': 'Skills and tricks üèÑüèæ‚Äç‚ôÄÔ∏è',
        '!siu': 'SIUUUUU üëê',
        '!taf': 'Sai que √© sua Taffarel!!! üôå',
        '!tira': 'Tira, zaga! üôÖ‚Äç‚ôÇÔ∏è',
        '!tnc': 'Tomar nescau! ü•§',
        '!ui': 'UI! üò≤',
        '!ui2': '( Õ°¬∞ Õú ñ Õ°¬∞)',
        '!uu': 'UUUU... üòØ',
        '!vira': 'Virada üîÄ',
        '!volt': 'Volta pra defesa! üëâ', 
        '!vl': 'Algu√©m VL? üëá',
        '!x': 'Aperta ‚úñ ‚ùï‚ùï',
        '!zag': 'Cad√™ a zaga? üë®üèº‚Äçü¶Ø ',
        '!zen': 'Zen üßò',
        '!divisao': 'EU SOU O PROBLEMA DA DIVIS√ÉO!!!',
        '!quentin': 'T√Å QUENTINHO A√ç? MEU BOLSO √â DE VELUDO!',
        '!logica': 'DEU A L√ìGICA...',
        '!base': 'VAI DE BASE ',
        '!meto2': 'Eu meto mesmo!',
        '!boa': 'Boa time!üëä',
        '!bai': 'Baila!üíÉ',
        '!bag': 'Bagre!üêü',
        '!bike': 'De bike!!!üö≤',
        '!bch': 'Belo chute!üëè',
        '!bpa': 'Belo passe!üëè',
        '!brb': 'Braboüòà',
        '!cal': 'Calma, p√¥!‚ú®',
        '!fome': 'Hmmm que fominha...üòã',
        '!fds': 'FDS!! Um √≥timo final de semana!üòé',
        '!jlu': 'Joga a luva, goleir√£o!üß§',
        '!itk': 'Algu√©m GK? Intank√°vel...üöôüö´',
        '!fzl': 'Faz o L!üôã‚Äç‚ôÇÔ∏è',
        '!gen': 'Seja gentil fdmüë®‚Äçüè´',
        '!kk': 'KKKKKKKKKKKKKKKKKKKK!ü§£',
        '!lae': 'La eleüñäÔ∏è',
        '!mal': 'Foi malüò¨',
        '!mal2': 'Foi malüòÖ',
        '!mal3': 'Foi malü•∫',
        '!mds': 'Meu Deus...üôè',
        '!nice': 'Nice!üëç',
        '!trave': 'Na trave!!üí•',
        '!puskas': 'Esse √© puskas!',
        '!bolso': 'Sai do meu bolso ai, ta incomodando.',
        '!pika': 'HAHAHAHA, ele √© pik@',
        '!papai': 'Ai papaii!',
        '!seupai': 'Chora n√£o!!!! Ja pode me registrar como seu pai.',
        '!peganunca': 'Pega nunk!!',
        '!quentin2': 'T√° quentinho ai????',
        '!izi': 'TEM COMO AUMENTAR O N√çVEL? T√Å MUITO EASY!',
        '!piden': 'Ei Piden, vai tomar no c*, filha da put@!',
        '!qsl': 'Ei Qsl, vai tomar no c*, filha da put@!',
        '!system': 'Ei System, vai tomar no c*, filha da put@!',
        '!oi': 'Oie ‚ô•Ô∏è',
        '!toma': 'Quem n√£o faz... toma!',
        '!ifood': 'Olha o ifood! foi aqui que pediram a entrega?',
        '!chute': 'QUE CHUTE FOI ESSE? L√Å ONDE A CORUJA DORME!',
        '!moscou': 'CAPITAL DA RUSSIA √â MOSCOW E COM N√ìS N√ÉO PODE MOSCAR. rs üòé',
        '!chora': 'CHORA N√ÉO BEB√ä, SE QUISER CHORAR VAI PRA MATERNIDADE‚ùóüë∂üèºüçº',
        '!red': 'Esse era o RED?',
        '!blue': 'Esse era o BLUE?',
        '!paired': 'EU = PAI DO REDùóûùóûùóûùóûùóûùóûü§£üòÇü§£üòÇ',
        '!paiblue': 'EU = PAI DO BLUEùóûùóûùóûùóûùóûùóûü§£üòÇü§£üòÇ',
        '!pegala': 'PEGA L√Å GOLEIR√ÉO ùóûùóûùóûùóûùóûùóûüëü‚öΩü•ÖüòÖ',
        '!perdoa': 'ELE N√£O PERDOA C4R4LH0‚ùó‚ùó‚ùó',
        '!perdoa2': 'N√ìS N√ÉO PERDOA N√ÉO, VIU‚ùì‚ùóüòÅ',
        '!receba': 'RECEBA C4R4LH0‚ùóüò§üò§üò§',
        '!meto': 'EU METO MESMO!!!',
        '!pega': 'QUERO VER PEGAR ESSA PORRA!!!',
        '!toca2': 'Toca no pae e descansa...',
        '!toca': 'Toca a bola!! ü¶∂',
        '!gk2': 'ACORDA GOLEIR√ÉO!!!',
        '!gk3': 'Ui, pega la Gk',
        '!gk4': 'O GK aqui sou eu! ‚õπÔ∏è‚Äç‚ôÄÔ∏è',
        '!gk5': 'Boa GK! ‚õπÔ∏è‚Äç‚ôÄÔ∏è',
        '!bobiu': 'BOBIU tomou ·µí·µó·µÉÃÅ ≥·∂¶·µí. ùóûùóûùóûùóûùóûùóûü§£üòÇüòÖ',
        '!oe': 'OEEE! Virou Space Bounce! üòÖüòÖ',
}

var salareplays = 'https://discordapp.com/api/webhooks/1357347983276118023/e5qIfFb6IYboRbe7dLcb2NjCvEO_JXQp6V0DXhExP-PXgAuhFPs8vJHp8Wk8aWNJPbsS'; // este webhook √© usado para enviar o resumo dos jogos; deveria estar em um canal de discord publico
var callAdminWebhook = 'https://discordapp.com/api/webhooks/1357347201805975823/GwtmiPyp9mqa4Ni99WMWC82mIT7F2KYjzBDH-XUNRUeCqZipZPpsLJ2MnVg0KHLBDzJq' //chat log de callAdmin
var passwordVipWebhook =  'https://discordapp.com/api/webhooks/1357347569184804934/obqf5zrFHdRDs09BWxVOrZ5Hf_1v7_pl1RgXKbB9okzsqMVDfcazqn5K_JoXZaAgGhv6' //senhas Vips
var divulgarsalaWebhook = 'https://discord.com/api/webhooks/1356793470685282374/08NY3mFphyUaJEVFmKIsrJ5gb4-m5sXwPGDRLlXhoVoAAXqZBey43DLfLmCZRd3jiCKF' // divulga a sala u√© 
var chatlog = 'https://discordapp.com/api/webhooks/1357346884217471057/zvOxqnSlJ9xOGXh_e0gcPsd4sGbOSJIQRXb-B3_HTTUEKwqkGESylrtxRGjiOvvdZVLh' // hist√≥rico do chat
var entradas = 'https://discordapp.com/api/webhooks/1357346781356359750/A0pJUkSW1sldwqppzF7AZ61So0AD4UkO31WsRqJqGqExT13g_ZBt8TicIMW-f9DRfA5n' // logs entrada

const webhooks = {
    gerente: "https://discordapp.com/api/webhooks/1357350568728854752/5qU3RkX7_hprZx3P5WEEv4YevYLDC9JBH1Et-43tcuF10S8Cee9ogWJjCpqI_zBECVTs",
    mods: "https://discordapp.com/api/webhooks/1357350646767947966/afQ-zyamfeqR1zKGSfEJoJZX7InbCIm-MCAbLMOXsWdtnX5zhhUtPJzypUpbzfEaM_7s",
    dono: "https://discordapp.com/api/webhooks/1357350754263765124/dDNfQzMFFHDTqCivReTT3x9N54leyt0G39Gbt3z1sYLcVbfQZE9FgIMkBuOoD_Tmf4_m",
    adm: "https://discordapp.com/api/webhooks/1357350885155405987/dWWnxkit-_BBYOLI-wHheDwdeXADH9QuJA1TBNgkNg_voL-_MgKB1yMo0G7wuxe3JF73"
};

var vipNames = {
    1: `üåÄ ‚Ä¢ Bronze`,
    2: `üîÜ ‚Ä¢ Ouro`,
    3: `üí† ‚Ä¢ Deluxe`,
    4: `üåü ‚Ä¢ Stars`,
}

var fetchRecordingVariable = true;

const futsalNovo = ` {
    "name": "Flash [Pro-League]",
    "width": 620,
    "height": 270,
    "spawnDistance": 350,
    "bg": {
        "type": "hockey",
        "width": 550,
        "height": 240,
        "kickOffRadius": 80,
        "cornerRadius": 0
    },
    "vertexes": [
        {
            "x": 550,
            "y": 240,
            "trait": "ballArea"
        },
        {
            "x": 550,
            "y": -240,
            "trait": "ballArea"
        },
        {
            "x": 0,
            "y": 270,
            "trait": "kickOffBarrier"
        },
        {
            "x": 0,
            "y": 80,
            "bCoef": 0.15,
            "trait": "kickOffBarrier",
            "color": "F8F8F8",
            "vis": true,
            "curve": 180
        },
        {
            "x": 0,
            "y": -80,
            "bCoef": 0.15,
            "trait": "kickOffBarrier",
            "color": "F8F8F8",
            "vis": true,
            "curve": 180
        },
        {
            "x": 0,
            "y": -270,
            "trait": "kickOffBarrier"
        },
        {
            "x": -550,
            "y": -80,
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "curve": 0,
            "color": "F8F8F8",
            "pos": [
                -700,
                -80
            ]
        },
        {
            "x": -590,
            "y": -80,
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "curve": 0,
            "color": "F8F8F8",
            "pos": [
                -700,
                -80
            ]
        },
        {
            "x": -590,
            "y": 80,
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "curve": 0,
            "color": "F8F8F8",
            "pos": [
                -700,
                80
            ]
        },
        {
            "x": -550,
            "y": 80,
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "curve": 0,
            "color": "F8F8F8",
            "pos": [
                -700,
                80
            ]
        },
        {
            "x": 550,
            "y": -80,
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "curve": 0,
            "color": "F8F8F8",
            "pos": [
                700,
                -80
            ]
        },
        {
            "x": 590,
            "y": -80,
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "curve": 0,
            "color": "F8F8F8",
            "pos": [
                700,
                -80
            ]
        },
        {
            "x": 590,
            "y": 80,
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "curve": 0,
            "color": "F8F8F8",
            "pos": [
                700,
                80
            ]
        },
        {
            "x": 550,
            "y": 80,
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "curve": 0,
            "color": "F8F8F8",
            "pos": [
                700,
                80
            ]
        },
        {
            "x": -550,
            "y": 80,
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "color": "F8F8F8",
            "pos": [
                -700,
                80
            ]
        },
        {
            "x": -550,
            "y": 240,
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "color": "F8F8F8"
        },
        {
            "x": -550,
            "y": -80,
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "color": "F8F8F8",
            "pos": [
                -700,
                -80
            ]
        },
        {
            "x": -550,
            "y": -240,
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "color": "F8F8F8"
        },
        {
            "x": -550,
            "y": 240,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea"
        },
        {
            "x": 550,
            "y": 240,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea"
        },
        {
            "x": 550,
            "y": 80,
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "pos": [
                700,
                80
            ]
        },
        {
            "x": 550,
            "y": 240,
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea"
        },
        {
            "x": 550,
            "y": -240,
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "color": "F8F8F8"
        },
        {
            "x": 550,
            "y": -80,
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "color": "F8F8F8",
            "pos": [
                700,
                -80
            ]
        },
        {
            "x": 550,
            "y": -240,
            "bCoef": 0,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea"
        },
        {
            "x": 550,
            "y": -240,
            "bCoef": 0,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea"
        },
        {
            "x": -550,
            "y": -240,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "curve": 0
        },
        {
            "x": 550,
            "y": -240,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "curve": 0
        },
        {
            "x": 0,
            "y": -240,
            "bCoef": 0.1,
            "cMask": [
                "red",
                "blue"
            ],
            "cGroup": [
                "redKO",
                "blueKO"
            ],
            "trait": "kickOffBarrier"
        },
        {
            "x": 0,
            "y": -80,
            "bCoef": 0.1,
            "cMask": [
                "red",
                "blue"
            ],
            "cGroup": [
                "redKO",
                "blueKO"
            ],
            "trait": "kickOffBarrier"
        },
        {
            "x": 0,
            "y": 80,
            "bCoef": 0.1,
            "cMask": [
                "red",
                "blue"
            ],
            "cGroup": [
                "redKO",
                "blueKO"
            ],
            "trait": "kickOffBarrier"
        },
        {
            "x": 0,
            "y": 240,
            "bCoef": 0.1,
            "cMask": [
                "red",
                "blue"
            ],
            "cGroup": [
                "redKO",
                "blueKO"
            ],
            "trait": "kickOffBarrier"
        },
        {
            "x": 0,
            "y": -80,
            "bCoef": 0.1,
            "cMask": [
                "red",
                "blue"
            ],
            "trait": "kickOffBarrier",
            "vis": true,
            "color": "F8F8F8"
        },
        {
            "x": 0,
            "y": 80,
            "bCoef": 0.1,
            "cMask": [
                "red",
                "blue"
            ],
            "trait": "kickOffBarrier",
            "vis": true,
            "color": "F8F8F8"
        },
        {
            "x": 0,
            "y": 80,
            "trait": "kickOffBarrier",
            "color": "F8F8F8",
            "vis": true,
            "curve": -180
        },
        {
            "x": 0,
            "y": -80,
            "trait": "kickOffBarrier",
            "color": "F8F8F8",
            "vis": true,
            "curve": -180
        },
        {
            "x": 0,
            "y": 80,
            "trait": "kickOffBarrier",
            "color": "F8F8F8",
            "vis": true,
            "curve": 0
        },
        {
            "x": 0,
            "y": -80,
            "trait": "kickOffBarrier",
            "color": "F8F8F8",
            "vis": true,
            "curve": 0
        },
        {
            "x": -557.5,
            "y": 80,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "curve": 0,
            "vis": false,
            "pos": [
                -700,
                80
            ]
        },
        {
            "x": -557.5,
            "y": 240,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "curve": 0,
            "vis": false
        },
        {
            "x": -557.5,
            "y": -240,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "vis": false,
            "curve": 0
        },
        {
            "x": -557.5,
            "y": -80,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "vis": false,
            "curve": 0,
            "pos": [
                -700,
                -80
            ]
        },
        {
            "x": 557.5,
            "y": -240,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "vis": false,
            "curve": 0
        },
        {
            "x": 557.5,
            "y": -80,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "vis": false,
            "curve": 0,
            "pos": [
                700,
                -80
            ]
        },
        {
            "x": 557.5,
            "y": 80,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "curve": 0,
            "vis": false,
            "pos": [
                700,
                80
            ]
        },
        {
            "x": 557.5,
            "y": 240,
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "curve": 0,
            "vis": false
        },
        {
            "x": 0,
            "y": -80,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 0,
            "y": 80,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -550,
            "y": -80,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -550,
            "y": 80,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 550,
            "y": -80,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 550,
            "y": 80,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -240,
            "y": 256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -120,
            "y": 256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -240,
            "y": -256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -120,
            "y": -224,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -120,
            "y": -256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 240,
            "y": 256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 120,
            "y": 224,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 120,
            "y": 256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 240,
            "y": -224,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 240,
            "y": -256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 120,
            "y": -224,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 120,
            "y": -256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -381,
            "y": 240,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -381,
            "y": 256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -550,
            "y": 200,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": -90
        },
        {
            "x": -390,
            "y": 70,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": 0
        },
        {
            "x": -550,
            "y": 226,
            "bCoef": 0.1,
            "trait": "line",
            "curve": -90
        },
        {
            "x": -536,
            "y": 240,
            "bCoef": 0.1,
            "trait": "line",
            "curve": -90
        },
        {
            "x": -550,
            "y": -200,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": 90
        },
        {
            "x": -390,
            "y": -70,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": 0
        },
        {
            "x": -550,
            "y": -226,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 90
        },
        {
            "x": -536,
            "y": -240,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 90
        },
        {
            "x": -556,
            "y": 123,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -575,
            "y": 123,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 556,
            "y": 123,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 575,
            "y": 123,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -556,
            "y": -123,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -575,
            "y": -123,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 556,
            "y": -123,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 575,
            "y": -123,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -381,
            "y": -240,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": -381,
            "y": -256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 381,
            "y": 240,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 381,
            "y": 256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 381,
            "y": -240,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 381,
            "y": -256,
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "x": 550,
            "y": -226,
            "bCoef": 0.1,
            "trait": "line",
            "curve": -90
        },
        {
            "x": 536,
            "y": -240,
            "bCoef": 0.1,
            "trait": "line",
            "curve": -90
        },
        {
            "x": 550,
            "y": 226,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 90
        },
        {
            "x": 536,
            "y": 240,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 90
        },
        {
            "x": 550,
            "y": 200,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": 90
        },
        {
            "x": 390,
            "y": 70,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": 90
        },
        {
            "x": 550,
            "y": -200,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": -90
        },
        {
            "x": 390,
            "y": -70,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": -90
        },
        {
            "x": 390,
            "y": 70,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": 0
        },
        {
            "x": 390,
            "y": -70,
            "bCoef": 0.1,
            "trait": "line",
            "color": "F8F8F8",
            "curve": 0
        },
        {
            "x": -375,
            "y": 1,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -375,
            "y": -1,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -375,
            "y": 3,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -375,
            "y": -3,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -375,
            "y": -2,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -375,
            "y": 2,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -375,
            "y": -3.5,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -375,
            "y": 3.5,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 375,
            "y": 1,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 375,
            "y": -1,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 375,
            "y": 3,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 375,
            "y": -3,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 375,
            "y": -2,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 375,
            "y": 2,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 375,
            "y": -3.5,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 375,
            "y": 3.5,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -277.5,
            "y": 1,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -277.5,
            "y": -1,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -277.5,
            "y": 3,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -277.5,
            "y": -3,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -277.5,
            "y": -2,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -277.5,
            "y": 2,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -277.5,
            "y": -3.5,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": -277.5,
            "y": 3.5,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 277.5,
            "y": 1,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 277.5,
            "y": -1,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 277.5,
            "y": 3,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 277.5,
            "y": -3,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 277.5,
            "y": -2,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 277.5,
            "y": 2,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 277.5,
            "y": -3.5,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        },
        {
            "x": 277.5,
            "y": 3.5,
            "bCoef": 0.1,
            "trait": "line",
            "curve": 180
        }
    ],
    "segments": [
        {
            "v0": 6,
            "v1": 7,
            "curve": 0,
            "color": "F8F8F8",
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "pos": [
                -700,
                -80
            ],
            "y": -80
        },
        {
            "v0": 7,
            "v1": 8,
            "color": "F8F8F8",
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "x": -590
        },
        {
            "v0": 8,
            "v1": 9,
            "curve": 0,
            "color": "F8F8F8",
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "pos": [
                -700,
                80
            ],
            "y": 80
        },
        {
            "v0": 10,
            "v1": 11,
            "curve": 0,
            "color": "F8F8F8",
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "pos": [
                700,
                -80
            ],
            "y": -80
        },
        {
            "v0": 11,
            "v1": 12,
            "color": "F8F8F8",
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "x": 590
        },
        {
            "v0": 12,
            "v1": 13,
            "curve": 0,
            "color": "F8F8F8",
            "cMask": [
                "red",
                "blue",
                "ball"
            ],
            "trait": "goalNet",
            "pos": [
                700,
                80
            ],
            "y": 80
        },
        {
            "v0": 2,
            "v1": 3,
            "trait": "kickOffBarrier"
        },
        {
            "v0": 3,
            "v1": 4,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.15,
            "cGroup": [
                "blueKO"
            ],
            "trait": "kickOffBarrier"
        },
        {
            "v0": 3,
            "v1": 4,
            "curve": -180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.15,
            "cGroup": [
                "redKO"
            ],
            "trait": "kickOffBarrier"
        },
        {
            "v0": 4,
            "v1": 5,
            "trait": "kickOffBarrier"
        },
        {
            "v0": 14,
            "v1": 15,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": -550
        },
        {
            "v0": 16,
            "v1": 17,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": -550
        },
        {
            "v0": 18,
            "v1": 19,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "y": 240
        },
        {
            "v0": 20,
            "v1": 21,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": 550
        },
        {
            "v0": 22,
            "v1": 23,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 1.15,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": 550
        },
        {
            "v0": 24,
            "v1": 25,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": 550,
            "y": -240
        },
        {
            "v0": 26,
            "v1": 27,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "y": -240
        },
        {
            "v0": 28,
            "v1": 29,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "cMask": [
                "red",
                "blue"
            ],
            "cGroup": [
                "redKO",
                "blueKO"
            ],
            "trait": "kickOffBarrier"
        },
        {
            "v0": 30,
            "v1": 31,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "cMask": [
                "red",
                "blue"
            ],
            "cGroup": [
                "redKO",
                "blueKO"
            ],
            "trait": "kickOffBarrier"
        },
        {
            "v0": 38,
            "v1": 39,
            "curve": 0,
            "vis": false,
            "color": "F8F8F8",
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": -557.5
        },
        {
            "v0": 40,
            "v1": 41,
            "curve": 0,
            "vis": false,
            "color": "F8F8F8",
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": -557.5
        },
        {
            "v0": 42,
            "v1": 43,
            "curve": 0,
            "vis": false,
            "color": "F8F8F8",
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": 557.5
        },
        {
            "v0": 44,
            "v1": 45,
            "curve": 0,
            "vis": false,
            "color": "F8F8F8",
            "bCoef": 1,
            "cMask": [
                "ball"
            ],
            "trait": "ballArea",
            "x": 557.5
        },
        {
            "v0": 46,
            "v1": 47,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 0
        },
        {
            "v0": 48,
            "v1": 49,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -550
        },
        {
            "v0": 50,
            "v1": 51,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 550
        },
        {
            "v0": 64,
            "v1": 65,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -381
        },
        {
            "v0": 66,
            "v1": 67,
            "curve": -90,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 69,
            "v1": 68,
            "curve": -90,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 70,
            "v1": 71,
            "curve": 90,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 67,
            "v1": 71,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 73,
            "v1": 72,
            "curve": 90,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 74,
            "v1": 75,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -240,
            "y": 123
        },
        {
            "v0": 76,
            "v1": 77,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -240,
            "y": 123
        },
        {
            "v0": 78,
            "v1": 79,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -240,
            "y": -123
        },
        {
            "v0": 80,
            "v1": 81,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -240,
            "y": -123
        },
        {
            "v0": 82,
            "v1": 83,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -381
        },
        {
            "v0": 84,
            "v1": 85,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 381
        },
        {
            "v0": 86,
            "v1": 87,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 381
        },
        {
            "v0": 89,
            "v1": 88,
            "curve": -90,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 91,
            "v1": 90,
            "curve": 90,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 92,
            "v1": 93,
            "curve": 90,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 94,
            "v1": 95,
            "curve": -90,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "v0": 96,
            "v1": 97,
            "curve": 0,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 390
        },
        {
            "v0": 99,
            "v1": 98,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -375
        },
        {
            "v0": 98,
            "v1": 99,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -375
        },
        {
            "v0": 101,
            "v1": 100,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -375
        },
        {
            "v0": 100,
            "v1": 101,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -375
        },
        {
            "v0": 103,
            "v1": 102,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -375
        },
        {
            "v0": 102,
            "v1": 103,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -375
        },
        {
            "v0": 105,
            "v1": 104,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -375
        },
        {
            "v0": 104,
            "v1": 105,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -375
        },
        {
            "v0": 107,
            "v1": 106,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 375
        },
        {
            "v0": 106,
            "v1": 107,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 375
        },
        {
            "v0": 109,
            "v1": 108,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 375
        },
        {
            "v0": 108,
            "v1": 109,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 375
        },
        {
            "v0": 111,
            "v1": 110,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 375
        },
        {
            "v0": 110,
            "v1": 111,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 375
        },
        {
            "v0": 113,
            "v1": 112,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 375
        },
        {
            "v0": 112,
            "v1": 113,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 375
        },
        {
            "v0": 115,
            "v1": 114,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -277.5
        },
        {
            "v0": 114,
            "v1": 115,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -277.5
        },
        {
            "v0": 117,
            "v1": 116,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -277.5
        },
        {
            "v0": 116,
            "v1": 117,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -277.5
        },
        {
            "v0": 119,
            "v1": 118,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -277.5
        },
        {
            "v0": 118,
            "v1": 119,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -277.5
        },
        {
            "v0": 121,
            "v1": 120,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -277.5
        },
        {
            "v0": 120,
            "v1": 121,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": -277.5
        },
        {
            "v0": 123,
            "v1": 122,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 277.5
        },
        {
            "v0": 122,
            "v1": 123,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 277.5
        },
        {
            "v0": 125,
            "v1": 124,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 277.5
        },
        {
            "v0": 124,
            "v1": 125,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 277.5
        },
        {
            "v0": 127,
            "v1": 126,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 277.5
        },
        {
            "v0": 126,
            "v1": 127,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 277.5
        },
        {
            "v0": 129,
            "v1": 128,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 277.5
        },
        {
            "v0": 128,
            "v1": 129,
            "curve": 180,
            "vis": true,
            "color": "F8F8F8",
            "bCoef": 0.1,
            "trait": "line",
            "x": 277.5
        }
    ],
    "goals": [
        {
            "p0": [
                -557.5,
                -80
            ],
            "p1": [
                -557.5,
                80
            ],
            "team": "red"
        },
        {
            "p0": [
                557.5,
                80
            ],
            "p1": [
                557.5,
                -80
            ],
            "team": "blue"
        }
    ],
    "discs": [
        {
            "radius": 5,
            "pos": [
                -550,
                80
            ],
            "color": "FF6666",
            "trait": "goalPost",
            "y": 80
        },
        {
            "radius": 5,
            "pos": [
                -550,
                -80
            ],
            "color": "FF6666",
            "trait": "goalPost",
            "y": -80,
            "x": -560
        },
        {
            "radius": 5,
            "pos": [
                550,
                80
            ],
            "color": "6666FF",
            "trait": "goalPost",
            "y": 80
        },
        {
            "radius": 5,
            "pos": [
                550,
                -80
            ],
            "color": "6666FF",
            "trait": "goalPost",
            "y": -80
        },
        {
            "radius": 3,
            "invMass": 0,
            "pos": [
                -550,
                240
            ],
            "color": "FFCC00",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "radius": 3,
            "invMass": 0,
            "pos": [
                -550,
                -240
            ],
            "color": "FFCC00",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "radius": 3,
            "invMass": 0,
            "pos": [
                550,
                -240
            ],
            "color": "FFCC00",
            "bCoef": 0.1,
            "trait": "line"
        },
        {
            "radius": 3,
            "invMass": 0,
            "pos": [
                550,
                240
            ],
            "color": "FFCC00",
            "bCoef": 0.1,
            "trait": "line"
        }
    ],
    "planes": [
        {
            "normal": [
                0,
                1
            ],
            "dist": -240,
            "bCoef": 1,
            "trait": "ballArea",
            "vis": false,
            "curve": 0,
            "_data": {
                "extremes": {
                    "normal": [
                        0,
                        1
                    ],
                    "dist": -240,
                    "canvas_rect": [
                        -265.90737278935563,
                        -115.798372021171,
                        265.90737278935563,
                        115.798372021171
                    ],
                    "a": [
                        -265.90737278935563,
                        -240
                    ],
                    "b": [
                        265.90737278935563,
                        -240
                    ]
                }
            }
        },
        {
            "normal": [
                0,
                -1
            ],
            "dist": -240,
            "bCoef": 1,
            "trait": "ballArea",
            "_data": {
                "extremes": {
                    "normal": [
                        0,
                        -1
                    ],
                    "dist": -240,
                    "canvas_rect": [
                        -265.90737278935563,
                        -115.798372021171,
                        265.90737278935563,
                        115.798372021171
                    ],
                    "a": [
                        -265.90737278935563,
                        240
                    ],
                    "b": [
                        265.90737278935563,
                        240
                    ]
                }
            }
        },
        {
            "normal": [
                0,
                1
            ],
            "dist": -270,
            "bCoef": 0.1,
            "_data": {
                "extremes": {
                    "normal": [
                        0,
                        1
                    ],
                    "dist": -270,
                    "canvas_rect": [
                        -265.90737278935563,
                        -115.798372021171,
                        265.90737278935563,
                        115.798372021171
                    ],
                    "a": [
                        -265.90737278935563,
                        -270
                    ],
                    "b": [
                        265.90737278935563,
                        -270
                    ]
                }
            }
        },
        {
            "normal": [
                0,
                -1
            ],
            "dist": -270,
            "bCoef": 0.1,
            "_data": {
                "extremes": {
                    "normal": [
                        0,
                        -1
                    ],
                    "dist": -270,
                    "canvas_rect": [
                        -265.90737278935563,
                        -115.798372021171,
                        265.90737278935563,
                        115.798372021171
                    ],
                    "a": [
                        -265.90737278935563,
                        270
                    ],
                    "b": [
                        265.90737278935563,
                        270
                    ]
                }
            }
        },
        {
            "normal": [
                1,
                0
            ],
            "dist": -620,
            "bCoef": 0.1,
            "_data": {
                "extremes": {
                    "normal": [
                        1,
                        0
                    ],
                    "dist": -620,
                    "canvas_rect": [
                        -265.90737278935563,
                        -115.798372021171,
                        265.90737278935563,
                        115.798372021171
                    ],
                    "a": [
                        -620,
                        -115.798372021171
                    ],
                    "b": [
                        -620,
                        115.798372021171
                    ]
                }
            }
        },
        {
            "normal": [
                -1,
                0
            ],
            "dist": -620,
            "bCoef": 0.1,
            "_data": {
                "extremes": {
                    "normal": [
                        -1,
                        0
                    ],
                    "dist": -620,
                    "canvas_rect": [
                        -265.90737278935563,
                        -115.798372021171,
                        265.90737278935563,
                        115.798372021171
                    ],
                    "a": [
                        620,
                        -115.798372021171
                    ],
                    "b": [
                        620,
                        115.798372021171
                    ]
                }
            }
        },
        {
            "normal": [
                1,
                0
            ],
            "dist": -620,
            "bCoef": 0.1,
            "trait": "ballArea",
            "vis": false,
            "curve": 0,
            "_data": {
                "extremes": {
                    "normal": [
                        1,
                        0
                    ],
                    "dist": -620,
                    "canvas_rect": [
                        -265.90737278935563,
                        -115.798372021171,
                        265.90737278935563,
                        115.798372021171
                    ],
                    "a": [
                        -620,
                        -115.798372021171
                    ],
                    "b": [
                        -620,
                        115.798372021171
                    ]
                }
            }
        },
        {
            "normal": [
                -1,
                0
            ],
            "dist": -620,
            "bCoef": 0.1,
            "trait": "ballArea",
            "vis": false,
            "curve": 0,
            "_data": {
                "extremes": {
                    "normal": [
                        -1,
                        0
                    ],
                    "dist": -620,
                    "canvas_rect": [
                        -265.90737278935563,
                        -115.798372021171,
                        265.90737278935563,
                        115.798372021171
                    ],
                    "a": [
                        620,
                        -115.798372021171
                    ],
                    "b": [
                        620,
                        115.798372021171
                    ]
                }
            }
        }
    ],
    "traits": {
        "ballArea": {
            "vis": false,
            "bCoef": 1,
            "cMask": [
                "ball"
            ]
        },
        "goalPost": {
            "radius": 8,
            "invMass": 0,
            "bCoef": 0.5
        },
        "goalNet": {
            "vis": true,
            "bCoef": 0.1,
            "cMask": [
                "ball"
            ]
        },
        "line": {
            "vis": true,
            "bCoef": 0.1,
            "cMask": [
                ""
            ]
        },
        "kickOffBarrier": {
            "vis": false,
            "bCoef": 0.1,
            "cGroup": [
                "redKO",
                "blueKO"
            ],
            "cMask": [
                "red",
                "blue"
            ]
        }
    },
    "playerPhysics": {
        "bCoef": 0,
        "acceleration": 0.11,
        "kickingAcceleration": 0.05,
        "kickStrength": 6,
        "radius": 15,
        "invMass": 0.5,
        "damping": 0.96,
        "cGroup": [
            "red",
            "blue"
        ],
        "gravity": [
            0,
            0
        ],
        "kickingDamping": 0.96,
        "kickback": 0
    },
    "ballPhysics": {
        "radius": 6.25,
        "bCoef": 0.4,
        "invMass": 1.5,
        "damping": 0.99,
        "color": "B22222",
        "cMask": [
            "all"
        ],
        "gravity": [
            0,
            0
        ],
        "cGroup": [
            "ball"
        ]
    },
    "cameraWidth": 0,
    "cameraHeight": 0,
    "maxViewWidth": 0,
    "cameraFollow": "ball",
    "redSpawnPoints": [],
    "blueSpawnPoints": [],
    "canBeStored": true,
    "kickOffReset": "partial",
    "joints": []
}`;

room.setScoreLimit(scoreLimit);
room.setTimeLimit(timeLimit);
room.setTeamsLock(true);
room.setKickRateLimit(6, 0, 0);

var gerentePassword = gerarSenhaAleatoria();
var modsPassword = gerarSenhaAleatoria();
var donoPassword = gerarSenhaAleatoria();
var admPassword = gerarSenhaAleatoria();

var vip1Password = getRandomInt2(10000, 99999)
var vip2Password = getRandomInt2(100000, 299999)
var vip3Password = getRandomInt2(200000, 399999)
var vip4Password = getRandomInt2(300000, 499999)
var roomPassword = '';
var tipoVip = 0
var streakMax = 0
var streakRecord = 0
var lastTeamStreak = []
/* OPTIONS */

var drawTimeLimit = 2;
var teamSize = 3;
var maxAdmins = 0;
var disableBans = false;
var debugMode = false;
var afkLimit = debugMode ? Infinity : 12;

var defaultSlowMode =  1
var chooseModeSlowMode = 1
var slowMode = defaultSlowMode
var SMSet = new Set()

var hideClaimMessage = true;
var mentionPlayersUnpause = true;

class Goal {
    constructor(time, team, striker, assist) {
        this.time = time;
        this.team = team;
        this.striker = striker;
        this.assist = assist;
    }
}

class Game {
    constructor() {
        this.date = Date.now();
        this.scores = room.getScores();
        this.playerComp = getStartingLineups();
        this.goals = [];
        this.rec = room.startRecording(); //rec
        this.touchArray = [];
    }
}

class PlayerComposition {
    constructor(player, auth, timeEntry, timeExit) {
        this.player = player;
        this.auth = auth;
        this.timeEntry = timeEntry;
        this.timeExit = timeExit;
        this.inactivityTicks = 0;
        this.GKTicks = 0;
    }
}

class MutePlayer {
    constructor(name, id, auth) {
        this.id = MutePlayer.incrementId();
        this.name = name;
        this.playerId = id;
        this.auth = auth;
        this.unmuteTimeout = null;
    }

    static incrementId() {
        if (!this.latestId) this.latestId = 1
        else this.latestId++
        return this.latestId
    }

    setDuration(minutes) {
        this.unmuteTimeout = setTimeout(() => {
            room.sendAnnouncement(
                `Tu foi desmutado!`,
                this.playerId,
                announcementColor,
                "bold",
                HaxNotification.CHAT
            );
            this.remove();
        }, minutes * 60 * 1000);
        muteArray.add(this);
    }

    remove() {
        this.unmuteTimeout = null;
        muteArray.removeById(this.id);
    }
}

class MuteList {
    constructor() {
        this.list = [];
    }

    add(mutePlayer) {
        this.list.push(mutePlayer);
        return mutePlayer;
    }

    getById(id) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.id === id);
        if (index !== -1) {
            return this.list[index];
        }
        return null;
    }

    getByPlayerId(id) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.playerId === id);
        if (index !== -1) {
            return this.list[index];
        }
        return null;
    }

    getByAuth(auth) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.auth === auth);
        if (index !== -1) {
            return this.list[index];
        }
        return null;
    }

    removeById(id) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.id === id);
        if (index !== -1) {
            this.list.splice(index, 1);
        }
    }

    removeByAuth(auth) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.auth === auth);
        if (index !== -1) {
            this.list.splice(index, 1);
        }
    }
}

class BallTouch {
    constructor(player, time, goal, position) {
        this.player = player;
        this.time = time;
        this.goal = goal;
        this.position = position;
    }
}

class HaxStatistics {
    constructor(playerName = '') {
        this.playerName = playerName
        this.games = 0
        this.wins = 0
        this.empates = 0
        this.winrate = '0.00%'
        this.goals = 0
        this.assists = 0
        this.CS = 0
        this.ownGoals = 0
        this.pontos = 0
    }
}

/* PLAYERS */

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const State = { PLAY: 0, PAUSE: 1, STOP: 2 };
const Role = { PLAYER: 0, ADMIN_TEMP: 1, ADMIN_PERM: 2, MASTER: 3 };
const HaxNotification = { NONE: 0, CHAT: 1, MENTION: 2 };
const Situation = { STOP: 0, KICKOFF: 1, PLAY: 2, GOAL: 3 };

var gameState = State.STOP;
var playSituation = Situation.STOP;
var goldenGoal = false;

var playersAll = [];
var players = [];
var teamRed = [];
var teamBlue = [];
var teamSpec = [];

var teamRedStats = [];
var teamBlueStats = [];

var banList = [];

/* STATS */

var possession = [0, 0];
var actionZoneHalf = [0, 0];
var lastWinner = Team.SPECTATORS;
var streak = 0;

/* AUTH */

var authArray = {};
var adminList = [
['', ''],
    // ['INSERT_AUTH_HERE_2', 'NICK_OF_ADMIN_2'],
]
var masterList = [
'bo-dzvzvkR-0jLHdXJLoBRO0rlguuirSQe6kjP_gO-M',
    // 'INSERT_MASTER_AUTH_HERE_2'
]
const dono = ['bo-dzvzvkR-0jLHdXJLoBRO0rlguuirSQe6kjP_gO-M'];
const gerente = [''];
const mods = [''];
const adm = [''];

var vips = []
var tirouTagRank = []
var tirouTagVip = []
var goalAttribution = 0
var modoVoteBan = false
var votosBan = 0
var votouBan = []
modoVoteMute = false
votosMute = 0
votouMute = []

/* COMMANDS */

var commands = {
    ajuda: {
        aliases: ['commands'],
        roles: Role.PLAYER,
        desc: `
	Este comando mostra todos os comandos dispon√≠veis. Ele tamb√©m pode mostrar a descri√ß√£o de um comando em particular.
Exemplo: '!ajuda bb' mostrar√° a descri√ß√£o do comando 'bb'.`,
        function: helpCommand,
    },
    discord: {
        aliases: ['ds', 'dc'],
        roles: Role.PLAYER,
        desc: `
        Este comando envia o link de convite para o nosso discord.`,
        function: sendLinkDiscord,
    },
    pt: {
        aliases: ['pm'],
        roles: Role.PLAYER,
        desc: `
        Este comando envia mensagem privada para outro jogador. Para usar digite !pt #id mensagem (utilize # para pegar o id)`,
        function: playerChat,
    },
    calladmin: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
	Este comando chamar√° um administrador no discord, com uma mensagem opcional. Exemplo: !calladminh Adm vem banir um racista pfvr`,
        function: callAdmin,
    },
    divulgar: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
	‚Ä¢ Este comando serve para voc√™ divulgar a sala.`,
        function: divulgarsala,
    },
    registrar: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Cria a sua conta`,
        function: registrar,
    },
    login: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Loga na sua conta.`,
        function: login,
    },
    mudarsenha: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Muda a senha da sua conta.`,
        function: mudarSenha,
    },
    voteban: {
        aliases: [],
        roles: Role.PLAYER,
        desc: ``,
        function: voteBan,
    },
    votemute: {
        aliases: [],
        roles: Role.PLAYER,
        desc: ``,
        function: voteMute,
    },
    dono: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: donosfazend,
    },  
    gerente: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: gerentefazend,
    }, 
    mod: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: modfazend,
    }, 
    claim: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: masterCommand,
    },
    adm: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: admfazend,
    },
    vip: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: vipCommand,
    },
    afk: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Este comando faz voc√™ ficar AFK.
    Tem restri√ß√µes: 1 minuto m√≠nimo de tempo de AFK, 5 minutos no m√°ximo e 10 minutos de cooldown.`,
        function: afkCommand,
    },
    afks: {
        aliases: ['afklist'],
        roles: Role.PLAYER,
        desc: `
        Este comando mostra todos os jogadores que est√£o AFK.`,
        function: afkListCommand,
    },
    bb: {
        aliases: ['bye'],
        roles: Role.PLAYER,
        desc: `
	Este comando faz voc√™ sair instantaneamente (uso recomendado).`,
        function: leaveCommand,
    },
    uni: {
        aliases: ['uniformes', 'unis', 'camisas', 'camisetas'],
        roles: Role.PLAYER,
        desc: `
	Este comando exibe categorias de uniformes disponiveis.`,
        function: mostraUnisCategorias,
    },
    selecoes: {
        aliases: ['sele', 'sel'],
        roles: Role.PLAYER,
        desc: `
	Este comando exibe uniformes de selec√µes disponiveis.`,
        function: mostraUnisSelecoes,
    },
    brasileiros: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
	Este comando exibe uniformes brasileiros disponiveis.`,
        function: mostraUnisBrasileiros,
    },
    outros: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
	Este comando exibe outros uniformes brasileiros disponiveis.`,
        function: mostraUnisOutros,
    },
    estrangeiros: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
	Este comando exibe uniformes estrangeiros disponiveis.`,
        function: mostraUnisEstrangeiros,
    },
    vipuni: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
	Este comando exibe uniformes especiais disponiveis.`,
        function: mostraUnisEspeciais,
    },
    provos: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
	Este comando exibe uniformes de selec√µes disponiveis.`,
        function: mostraProvocacoes,
    },
    me: {
        aliases: ['mestat', 'mestats'],
        roles: Role.PLAYER,
        desc: `
        Este comando mostra suas estat√≠sticas globais na sala para tu somente.`,
        function: globalStatsCommandMe,
    },
    mostrarstats: {
        aliases: ['stat', 'stats','mostrarstat'],
        roles: Role.PLAYER,
        desc: `
        Este comando mostra suas estat√≠sticas globais na sala para todos.`,
        function: globalStatsCommand,
    },
    resetar: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Este comando reseta todas as estat√≠sticas.`,
        function: resetarStats,
    },
    streak: {
        aliases: ['streaks'],
        roles: Role.PLAYER,
        desc: false,
        function: mostraStreak,
    },
    rank: {
        aliases: ['rankinfo'],
        roles: Role.PLAYER,
        desc: `
	Este comando mostra todos os ranks disponiveis no servidor ELITE. Ele tamb√©m explica os requesitos para upar de rank.`,
        function: rankInfo,
    },
    pontos: {
        aliases: ['ponto'],
        roles: Role.PLAYER,
        desc: `
	Este comando mostra seus pontos no servidor ELITE. Ele tamb√©m explica os requesitos para adquirir pontos.`,
        function: pontos,
    },
    renomear: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Este comando permite que voc√™ se renomeie para a tabela de classifica√ß√£o.`,
        function: renameCommand,
    },
    jogos: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Este comando mostra os 5 melhores jogadores com mais jogos na sala.`,
        function: statsLeaderboardCommand,
    },
    vitorias: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Este comando mostra os 5 melhores jogadores com mais vit√≥rias na sala.`,
        function: statsLeaderboardCommand,
    },
    gols: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Este comando mostra os 5 melhores jogadores com mais gols na sala.`,
        function: statsLeaderboardCommand,
    },
    assist: {
        aliases: ['assistencias', 'assists'],
        roles: Role.PLAYER,
        desc: `
        Este comando mostra os 5 melhores jogadores com mais assist√™ncias na sala.`,
        function: statsLeaderboardCommand,
    },
    cs: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Este comando mostra os 5 melhores jogadores com mais CS na sala.`,
        function: statsLeaderboardCommand,
    },
    map1: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        Este comando carrega o grande est√°dio.`,
        function: stadiumCommand,
    },
    rr: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    Este comando reinicia o jogo.`,
        function: restartCommand,
    },
    mutar: {
        aliases: ['m'],
        roles: Role.ADMIN_TEMP,
        desc: `
        Este comando permite silenciar um jogador. Ele n√£o poder√° falar por um determinado per√≠odo e pode ser ativado a qualquer momento pelos administradores.
    S√£o necess√°rios 2 argumentos:
    Argumento 1: #<id> onde <id> √© o id do jogador alvo. Isso n√£o funcionar√° se o jogador for um administrador.
    Argumento 2 (opcional): <duration> onde <duration> √© a dura√ß√£o do mute em minutos. Se nenhum valor for fornecido, o sil√™ncio dura a dura√ß√£o padr√£o, ${muteDuration} minutos.
    Exemplo: !mute #3 20 ir√° silenciar o player com id 3 por 20 minutos.`,
        function: muteCommand,
    },
    desmutar: {
        aliases: ['um'],
        roles: Role.ADMIN_TEMP,
        desc: `
        Este comando permite ativar o som de algu√©m.
    Leva 1 argumento:
    Argumento 1: #<ID> onde <ID> √© o ID do player silenciado.
    OU
    Argumento 1: <ID> onde <ID> √© o n√∫mero associado ao mute fornecido pelo comando '!mutados'.
    Exemplo: !desmutar #300 ir√° ativar o chat do player com id 300,
             !desmutar 8 ir√° ativar o chat do jogador n¬∞8 de acordo com o comando '!mutados'.`,
        function: unmuteCommand,
    },
    mutados: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        Este comando mostra a lista de jogadores silenciados.`,
        function: muteListCommand,
    },
    clearbans: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
	Este comando desbloqueia todos. Ele tamb√©m pode desbanir um jogador em particular, adicionando seu ID como argumento.`,
        function: clearbansCommand,
    },
    bans: {
        aliases: ['banlist'],
        roles: Role.MASTER,
        desc: `
    Este comando mostra todos os jogadores que foram banidos e seus IDs.`,
        function: banListCommand,
    },
    admins: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
    Este comando mostra todos os jogadores que s√£o administradores permanentes.`,
        function: adminListCommand,
    },
    setadmin: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
    Este comando permite definir algu√©m como administrador. Ele poder√° se conectar como administrador, podendo ser removido a qualquer momento pelos mestres.
Leva 1 argumento:
Argumento 1: #<id> onde <id> √© o id do jogador alvo.
Exemplo: !setadmin #3 dar√° admin ao jogador com id 3.`,
        function: setAdminCommand,
    },
    removeradmin: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
    Este comando remove um admin!`,
        function: removerAdmin,
    },
    setvip: {
        aliases: [''],
        roles: Role.MASTER,
        desc: `
    Este comando permite definir algu√©m como VIP.
    Leva 1 argumento:
    Argumento 1: #<id> onde <id> √© o id do jogador alvo.
    Exemplo: !setvip #3 dar√° VIP ao jogador com id 3.`,
        function: setVipCommand,
    },
    vips: {
        aliases: [''],
        roles: Role.MASTER,
        desc: false,
        function: showVips,
    },
    removervip: {
        aliases: [''],
        roles: Role.MASTER,
        desc: false,
        function: removerVip,
    },
    senha: {
        aliases: ['pw', 'password'],
        roles: Role.MASTER,
        desc: `
        Este comando permite adicionar uma senha √† sala.
    Leva 1 argumento:
    Argumento 1: <password> onde <password> √© a senha que voc√™ deseja para a sala.
    
    Para remover a senha da sala, basta digitar '!password'.`,
        function: passwordCommand,
    },
};

/* GAME */

var lastTouches = Array(2).fill(null);
var lastTeamTouched;

var speedCoefficient = 100 / (5 * (0.99 ** 60 + 1));
var ballSpeed = 0;
var playerRadius = 15;
var ballRadius = 10;
var triggerDistance = playerRadius + ballRadius + 0.01;

/* COLORS */

var welcomeColor = 0xc4ff65;
var announcementColor = 0xffefd6//0xAA00FF;
var infoColor = 0xbebebe//0x76FF03;
var privateMessageColor = 0xffc933;
var redColor = 0xff4c4c;
var blueColor = 0x62cbff;
var warningColor = 0xffa135;
var errorColor = 0xFA5646
var successColor = 0x75ff75;
var defaultColor = null;

/* AUXILIARY */

var checkTimeVariable = false;
var checkStadiumVariable = true;
var endGameVariable = false;
var cancelGameVariable = false;
var kickFetchVariable = false;

var chooseMode = false;
var timeOutCap;
var capLeft = false;
var redCaptainChoice = '';
var blueCaptainChoice = '';
var chooseTime = 20;

var AFKSet = new Set();
var AFKMinSet = new Set();
var AFKCooldownSet = new Set();
var minAFKDuration = 0;
var maxAFKDuration = 10;
var AFKCooldown = 0;

var muteArray = new MuteList();
var muteDuration = 5;

var removingPlayers = false;
var insertingPlayers = false;

var stopTimeout;
var startTimeout;
var unpauseTimeout;
var removingTimeout;
var insertingTimeout;

var emptyPlayer = {
    id: 0,
};
stadiumCommand(emptyPlayer, "!map1");

var game = new Game();


/* FUNCTIONS */



/* AUXILIARY FUNCTIONS */

if (typeof String.prototype.replaceAll != 'function') {
    String.prototype.replaceAll = function (search, replacement) {
        var target = this;
        return target.split(search).join(replacement);
    };
}

function rankInfo(player, message){
    room.sendAnnouncement(`A cada 100 pontos voc√™ upa de rank! Para saber mais sobre seus pontos digite !pontos`, player.id, 0xFFEFD6, 'bold');
    room.sendAnnouncement(`Ranks da Pro-League:` , player.id, 0xFFEFD6, 'bold')
    room.sendAnnouncement(`ü•âìäàùêÅùê´ùê®ùêßùê≥ùêûìäâ  ü•âü•âìäàùêÅùê´ùê®ùêßùê≥ùêûìäâ  ü•âü•âü•âìäàùóïùóøùóºùóªùòáùó≤ìäâ  ü•àìäàùêèùê´ùêöùê≠ùêöìäâ  ü•àü•àìäàùêèùê´ùêöùê≠ùêöìäâ  ü•àü•àü•àìäàùêèùê´ùêöùê≠ùêöìäâ
      ü•áìäàùêéùêÆùê´ùê®ìäâ  ü•áü•áìäàùêéùêÆùê´ùê®ìäâ  ü•áü•áü•áìäàùêéùêÆùê´ùê®ìäâ ‚öîÔ∏èìäàùêèùê•ùêöùê≠ùê¢ùêßùêöìäâ ‚öîÔ∏è‚öîÔ∏èìäàùêèùê•ùêöùê≠ùê¢ùêßùêöìäâ ‚öîÔ∏è‚öîÔ∏è‚öîÔ∏èìäàùêèùê•ùêöùê≠ùê¢ùêßùêöìäâ 
      üíéìäàùêÉùê¢ùêöùê¶ùêöùêßùê≠ùêûìäâ  üíéüíéìäàùêÉùê¢ùêöùê¶ùêöùêßùê≠ùêûìäâ  üíéüíéüíéìäàùêÉùê¢ùêöùê¶ùêöùêßùê≠ùêûìäâ ‚ö°ìäàùêëùêöùê¢ùê®ìäâ ‚ö°‚ö°ìäàùêëùêöùê¢ùê®ìäâ ‚ö°‚ö°‚ö°ìäàùêëùêöùê¢ùê®ìäâ
      ‚ùÑÔ∏èìäàùêÜùêûùê•ùêöùêùùê®ìäâ  ‚ùÑÔ∏è‚ùÑÔ∏èìäàùêÜùêûùê•ùêöùêùùê®ìäâ  ‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏èìäàùêÜùêûùê•ùêöùêùùê®ìäâ  üåüìäàùêÑùê±ùê≠ùê´ùêûùê•ùêöùê´ìäâ  üåüüåüìäàùêÑùê±ùê≠ùê´ùêûùê•ùêöùê´ìäâ  üåüüåüüåüìäàùêÑùê±ùê≠ùê´ùêûùê•ùêöùê´ìäâ
      üëíìäàùêçùê¢ùêØùêûùê• ùê•ùêÆùêüùêüùê≤ìäâ  üëíüëíìäàùêçùê¢ùêØùêûùê• ùê•ùêÆùêüùêüùê≤ìäâ  üëíüëíüëíìäàùêçùê¢ùêØùêûùê• ùê•ùêÆùêüùêüùê≤ìäâ  
      üé©ìäàùêãùêûùêßùêùùêöìäâ  üåçüî•üíßüå¨Ô∏èìäàùêÑùê•ùêûùê¶ùêûùêßùê≠ùêöùê´ìäâ  üëΩìäàùóòùòÖùòÅùóøùóÆùòÅùó≤ùóøùóøùó≤ùòÄùòÅùóøùó≤ìäâ  üçÅìäàùêèùê´ùê® ùêãùêûùêöùê†ùêÆùêûìäâ  üèÜ ìäàùêçùê¢ùêØùêûùê• ùêöùêÆùê†ùêûìäâ`, player.id, 0xB22222, HaxNotification.NONE)
    
}

function pontos(player, message){
    var stats = new HaxStatistics(player.name)
    if (localStorage.getItem(authArray[player.id])) {
        stats = JSON.parse(localStorage.getItem(authArray[player.id]))
    }
    room.sendAnnouncement(`Tu possui ${stats.pontos} pontos!\nFormas de adquirir/perder pontos:\nVit√≥ria +3 | Gol +1 | Assist√™ncia +1 | CS +1 | Empate +1 | Derrota -1`,
                player.id, defaultColor, 'bold', HaxNotification.NONE)
}

function getDate() {
    let d = new Date();
    return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
}

/* MATH FUNCTIONS */

room.onPlayerChat = function (player, message) {
    if (!message.startsWith('!')) {
        fetch(chatlog, {
            method: 'POST',
            body: JSON.stringify({
                content: `||[${getDate()}]|| [üí¨] CHAT \n**${player.name}** : ${message.replace('@', '@ ')}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
}

room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) {
    kickFetchVariable = true;

    if (chatlog != '') {
        var stringContent = `||[${getDate()}]|| ‚õî ${ban ? 'BAN' : 'KICK'}\n` +
            `**${kickedPlayer.name}** was ${ban ? 'banned' : 'kicked'}` +
            `${byPlayer != null ? ' by **' + byPlayer.name + '**' : ''}`
        fetch(chatlog, {
            method: 'POST',
            body: JSON.stringify({
                content: stringContent,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
}

function getCurrentDatetime() {
    const currentDate = new Date();

    const day = currentDate.getDate().toString().padStart(2, '0');
    const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
    const year = currentDate.getFullYear().toString().padStart(4, '0');

    const hour = currentDate.getHours().toString().padStart(2, '0');
    const minute = currentDate.getMinutes().toString().padStart(2, '0');
    const second = currentDate.getSeconds().toString().padStart(2, '0');

    return `${day}/${month}/${year} - ${hour}:${minute}:${second}`;
}

console.log(getCurrentDatetime());

if (typeof String.prototype.replaceAll != 'function') {
    String.prototype.replaceAll = function (search, replacement) {
        var target = this;
        return target.split(search).join(replacement);
    };
}

/* ENTRADAS */
function logsentradas(message) {
    var request = new XMLHttpRequest();
    request.open("POST", entradas);
    request.setRequestHeader('Content-type', 'application/json');

    var params = {
        avatar_url: 'https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?',
        username: 'Logs Entradas',
        content: message
    };

    request.send(JSON.stringify(params));
}

/* CHAT SALA */
function enviaChatParaDiscord(message) {
    try {
        fetch(chatlog, {
            method: 'POST',
            body: JSON.stringify({
                content: `||${getCurrentDatetime()}|| ${message}`,
                avatar_url: "https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?",
                username: `${roomName} - Chat Log`,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res)
    } catch (err) {
        error(err);
    }
}

/* DIVULGAR SALA */
function divulgarsala(player, message) {
    const salaLink = message.substring(10).trim();
    if (salaLink.length === 0) {
        room.sendAnnouncement(
            "‚ùå Voc√™ n√£o especificou o link da sala para divulga√ß√£o.",
            player.id,
            0xFF0000, // Vermelho
            'bold',
            HaxNotification.MENTION
        );
        return false;
    }

    fetch(divulgarsalaWebhook, {
        method: 'POST',
        body: JSON.stringify({
            username: "Divulgador", // Nome do webhook
            avatar_url: "https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?",
            embeds: [
                {
                    title: "üéâ ** Sala Ativa! **",
                    description: `**Divulgado por:** ${player.name}`,
                    color: 0x00ff00, // Azul Vibrante
                    fields: [
                        {
                            name: "üèüÔ∏è **Sala**",
                            value: `> ${roomName}`,
                            inline: false,
                        },
                        {
                            name: "üîó **LINK**",
                            value: `[Clique para acessar](${salaLink})`,
                            inline: false,
                        },
                        ],
                        thumbnail: {
                            url: 'https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?',
                        },
                        image: {
                            url: 'https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?',
                        },
                    footer: {
                        text: "Esses Diretos s√£o recervados pela Pro-League",
                        icon_url: "https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?",
                    },
                    timestamp: new Date().toISOString(),
                },
            ],
        }),
        headers: {
            'Content-Type': 'application/json',
        },
    }).then((res) => res);

    room.sendAnnouncement(
        "‚úÖ Sala divulgada com sucesso!",
        player.id,
        0x00FF00, // Verde
        'bold',
        HaxNotification.CHAT
    );

    return false;
}

function callAdmin(player, message) {
    if (!bloquear_comando.includes(player.name)) {
        const report = message.substr(11).trim();

        if (report.length === 0) {
            room.sendAnnouncement(
                `${player.name}, voc√™ n√£o especificou um motivo... \nExemplo: !calladmin Adm vem banir um racista`,
                player.id,
                errocor,
                'bold',
                HaxNotification.MENTION
            );
            return false;
        }

        room.sendAnnouncement(
            "„ÄêPV„Äë‚úÖ CallAdmin enviado com sucesso.",
            player.id,
            0x00FF00, // Verde
            'bold',
            HaxNotification.CHAT
        );
        room.sendAnnouncement(
            `„ÄêPV„ÄëMotivo registrado: "${report}"`,
            player.id,
            0x00FF00,
            'bold'
        );

        bloquear_comando.push(player.name);

        setTimeout(() => {
            const removerIndex = bloquear_comando.indexOf(player.name);
            if (removerIndex > -1) {
                bloquear_comando.splice(removerIndex, 1);
            }
        }, 120000); // 2 minutos

        fetch(callAdminWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `||${getCurrentDatetime()} - @here|| üì¢ **CallAdmin:**`,
                username: "Calladmin",
                avatar_url: 'https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?',
                embeds: [
                    {
                        title: "üö® **Novo CallAdmin Recebido**",
                        description: `**Detalhes do Relat√≥rio:**`,
                        color: 0x00ff00, // verde
                        fields: [
                            {
                                name: "üë§ **Jogador**",
                                value: `> ${player.name}`,
                                inline: true,
                            },
                            {
                                name: "üìã **Motivo**",
                                value: `> ${report}`,
                                inline: true,
                            },
                            {
                                name: "üèüÔ∏è **Sala**",
                                value: `> ${roomName}`,
                                inline: false,
                            },
                            {
                                name: "üïí **Hor√°rio**",
                                value: `> ${getCurrentDatetime()}`,
                                inline: false,
                            },
                        ],
                        thumbnail: {
                            url: 'https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?',
                        },
                        image: {
                            url: 'https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?',
                        },
                        footer: {
                            text: "Todos os diretos das salas Pro-League",
                            icon_url: 'https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?',
                            content: "Deus aben√ßoe voc√™s!"
                        },
                        timestamp: new Date().toISOString(),
                    },
                ],
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);

        return false;
    } else {
        room.sendAnnouncement(
            "‚ùå Voc√™ j√° chamou os administradores. Aguarde 2 minutos para poder cham√°-los novamente.",
            player.id,
            errocor,
            'bold',
            HaxNotification.MENTION
        );
    }
}

function sendPasswordVip(name) {
    if (passwordVipWebhook != "") {
        fetch(passwordVipWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `${name ? `${name} virou Vip!\n` : ""}Novas senhas Vips:\n${vipNames[1]}: ${vip1Password}\n${vipNames[2]}: ${vip2Password}\n${vipNames[3]}: ${vip3Password}\n${vipNames[4]}: ${vip4Password}\n-----------------------------------------------------------\n„Ö§`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    return false
}

function sendPasswordono(name) {
    if (webhooks.dono != "") {
        fetch(webhooks.dono, {
            method: 'POST',
            body: JSON.stringify({
                content: `${name ? `${name} virou dono!\n` : ""}Nova senha foi gerada para dono:\n${donoPassword}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    return false
}

function sendPasswordgerente(name) {
    if (webhooks.gerente != "") {
        fetch(webhooks.gerente, {
            method: 'POST',
            body: JSON.stringify({
                content: `${name ? `${name} virou gerente!\n` : ""}Nova senha foi gerada para gerente:\n${gerentePassword}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    return false
}

function sendPasswordadmin(name) {
    if (webhooks.adm != "") {
        fetch(webhooks.adm, {
            method: 'POST',
            body: JSON.stringify({
                content: `${name ? `${name} virou adm!\n` : ""}Nova senha foi gerada para adm:\n${admPassword}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    return false
}

function sendPasswordmod(name) {
    if (webhooks.mods != "") {
        fetch(webhooks.mods, {
            method: 'POST',
            body: JSON.stringify({
                content: `${name ? `${name} virou mod!\n` : ""}Nova senha foi gerada para mod:\n${modsPassword}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    return false
}

function gerarSenhaAleatoria() {
    return Math.floor(100000 + Math.random() * 900000); // Gera uma senha de 6 d√≠gitos
}

function getRandomInt2(min, max) {
    // returns a random number between 0 and max-1
    return Math.floor(Math.random() * (max - min) + 1)
}

function getRandomInt(max) {
    // returns a random number between 0 and max-1
    return Math.floor(Math.random() * Math.floor(max))
}

function pointDistance(p1, p2) {
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}

/* TIME FUNCTIONS */

function getMinutesGame(time) {
    var t = Math.floor(time / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getMinutesReport(time) {
    return Math.floor(Math.round(time) / 60);
}

function getMinutesEmbed(time) {
    var t = Math.floor(Math.round(time) / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsGame(time) {
    var t = Math.floor(time - Math.floor(time / 60) * 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsReport(time) {
    var t = Math.round(time);
    return Math.floor(t - getMinutesReport(t) * 60);
}

function getSecondsEmbed(time) {
    var t = Math.round(time);
    var t2 = Math.floor(t - Math.floor(t / 60) * 60);
    return `${Math.floor(t2 / 10)}${Math.floor(t2 % 10)}`;
}

function getTimeGame(time) {
    return `[${getMinutesGame(time)}:${getSecondsGame(time)}]`;
}

function getTimeEmbed(time) {
    return `[${getMinutesEmbed(time)}:${getSecondsEmbed(time)}]`;
}

function getTimeStats(time) {
    if (getHoursStats(time) > 0) {
        return `${getHoursStats(time)}h${getMinutesStats(time)}m`;
    } else {
        return `${getMinutesStats(time)}m`;
    }
}

function getGoalGame() {
    return game.scores.red + game.scores.blue;
}

/* REPORT FUNCTIONS */

function findFirstNumberCharString(str) {
    let str_number = str[str.search(/[0-9]/g)];
    return str_number === undefined ? "0" : str_number;
}

function getIdReport() {
    var d = new Date();
    return `${d.getFullYear() % 100}${d.getMonth() < 9 ? '0' : ''}${d.getMonth() + 1}${d.getDate() < 10 ? '0' : ''}${d.getDate()}${d.getHours() < 10 ? '0' : ''}${d.getHours()}${d.getMinutes() < 10 ? '0' : ''}${d.getMinutes()}${d.getSeconds() < 10 ? '0' : ''}${d.getSeconds()}${findFirstNumberCharString(roomName)}`;
}

function getRecordingName(game) {
    let d = new Date();
    let redCap = game.playerComp[0][0] != undefined ? game.playerComp[0][0].player.name : 'Red';
    let blueCap = game.playerComp[1][0] != undefined ? game.playerComp[1][0].player.name : 'Blue';
    let day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate();
    let month = d.getMonth() < 10 ? '0' + (d.getMonth() + 1) : (d.getMonth() + 1);
    let year = d.getFullYear() % 100 < 10 ? '0' + (d.getFullYear() % 100) : (d.getFullYear() % 100);
    let hour = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();
    let minute = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();
    return `${day}-${month}-${year}-${hour}h${minute}-${redCap}vs${blueCap}.hbr2`;
}

function fetchRecording(game) {
    if (salareplays != "") {
        let form = new FormData();
        form.append(null, new File([game.rec], getRecordingName(game), { "type": "text/plain" }));
        form.append("payload_json", JSON.stringify({
            "username": roomName,
            "avatar_url": "https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?",
            "embeds": [{
                "title": "Replay da Partida",
                "description": "Confira o replay da √∫ltima partida jogada!",
                "color": 65280,
                "thumbnail": {
                    "url": "https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?"
                },
                "image": {
                    "url": "https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?"
                },
                "fields": [
                    {
                        "name": "Data",
                        "value": new Date().toLocaleString(),
                        "inline": true
                    },
                    {
                        "name": "Sala",
                        "value": roomName,
                        "inline": true
                    }
                ],
                "footer": {
                    "text": "Replay x4",
                    "icon_url": "https://media.discordapp.net/attachments/1280499520995725393/1356442873272471753/ca3a455d-f7fe-44ae-b6c5-9b4fc130a694.jpeg?"
                }
            }]
        }));

        fetch(salareplays, {
            method: 'POST',
            body: form,
        }).then((res) => res);
    }
}


/* FEATURE FUNCTIONS */

function getCommand(commandStr) {
    if (commands.hasOwnProperty(commandStr)) return commandStr;
    for (const [key, value] of Object.entries(commands)) {
        for (let alias of value.aliases) {
            if (alias == commandStr) return key;
        }
    }
    return false;
}

function getPlayerComp(player) {
    if (player == null || player.id == 0) return null;
    var comp = game.playerComp;
    var index = comp[0].findIndex((c) => c.auth == authArray[player.id]);
    if (index != -1) return comp[0][index];
    index = comp[1].findIndex((c) => c.auth == authArray[player.id]);
    if (index != -1) return comp[1][index];
    return null;
}

function getTeamArray(team) {
    return team == Team.RED ? teamRed : team == Team.BLUE ? teamBlue : teamSpec;
}

function sendAnnouncementTeam(message, team, color, style, mention) {
    for (let player of team) {
        room.sendAnnouncement(message, player.id, color, style, mention);
    }
}

function teamChat(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    var emoji = player.team == Team.RED ? 'üî¥' : player.team == Team.BLUE ? 'üîµ' : '‚ö™';
    var message = `${emoji} [TEAM] ${player.name}: ${msgArray.join(' ')}`;
    var team = getTeamArray(player.team);
    var color = player.team == Team.RED ? redColor : player.team == Team.BLUE ? blueColor : null;
    var style = 'bold';
    var mention = HaxNotification.CHAT;
    sendAnnouncementTeam(message, team, color, style, mention);
}

function playerChat(player, message) {
    var msgArray = message.split(/ +/);
    if(!msgArray[1]){
        room.sendAnnouncement(
            `ID do jogador n√£o informado!`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false
    }
    var playerTargetIndex = playersAll.findIndex(
        (p) => p.id == msgArray[1].substring(1)
    );
    if (playerTargetIndex == -1) {
        room.sendAnnouncement(
            `Jogador inv√°lido, verifique se o ID digitado est√° correto.`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var playerTarget = playersAll[playerTargetIndex];
    if (player.id == playerTarget.id) {
        room.sendAnnouncement(
            `Tu n√£o pode enviar uma mensagem privada para si mesmo!`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var messageFrom = `üìù [Mensagem para ${playerTarget.name}] ${player.name}: ${msgArray.slice(2).join(' ')}`

    var messageTo = `üìù [Mensagem de ${player.name}] ${player.name}: ${msgArray.slice(2).join(' ')}`

    room.sendAnnouncement(
        messageFrom,
        player.id,
        privateMessageColor,
        'bold',
        HaxNotification.NONE
    );
    room.sendAnnouncement(
        messageTo,
        playerTarget.id,
        privateMessageColor,
        'bold',
        HaxNotification.NONE
    );
}

/* PHYSICS FUNCTIONS */

function calculateStadiumVariables() {
    if (checkStadiumVariable && teamRed.length + teamBlue.length > 0) {
        checkStadiumVariable = false;
        setTimeout(() => {
            let ballDisc = room.getDiscProperties(0);
            let playerDisc = room.getPlayerDiscProperties(teamRed.concat(teamBlue)[0].id);
            ballRadius = ballDisc.radius;
            playerRadius = playerDisc.radius;
            triggerDistance = ballRadius + playerRadius + 0.01;
            speedCoefficient = 100 / (5 * ballDisc.invMass * (ballDisc.damping ** 60 + 1));
        }, 1);
    }
}

function checkGoalKickTouch(array, index, goal) {
    if (array != null && array.length >= index + 1) {
        var obj = array[index];
        if (obj != null && obj.goal != null && obj.goal == goal) return obj;
    }
    return null;
}

/* BUTTONS */

function topButton() {
    if (teamSpec.length > 0) {
        if (teamRed.length == teamBlue.length && teamSpec.length > 1) {
            room.setPlayerTeam(teamSpec[0].id, Team.RED);
            room.setPlayerTeam(teamSpec[1].id, Team.BLUE);
        } else if (teamRed.length < teamBlue.length)
            room.setPlayerTeam(teamSpec[0].id, Team.RED);
        else room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
    }
}

function randomButton() {
    if (teamSpec.length > 0) {
        if (teamRed.length == teamBlue.length && teamSpec.length > 1) {
            var r = getRandomInt(teamSpec.length);
            room.setPlayerTeam(teamSpec[r].id, Team.RED);
            teamSpec = teamSpec.filter((spec) => spec.id != teamSpec[r].id);
            room.setPlayerTeam(teamSpec[getRandomInt(teamSpec.length)].id, Team.BLUE);
        } else if (teamRed.length < teamBlue.length)
            room.setPlayerTeam(teamSpec[getRandomInt(teamSpec.length)].id, Team.RED);
        else
            room.setPlayerTeam(teamSpec[getRandomInt(teamSpec.length)].id, Team.BLUE);
    }
}

function blueToSpecButton() {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (var i = 0; i < teamBlue.length; i++) {
        room.setPlayerTeam(teamBlue[teamBlue.length - 1 - i].id, Team.SPECTATORS);
    }
}

function redToSpecButton() {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (var i = 0; i < teamRed.length; i++) {
        room.setPlayerTeam(teamRed[teamRed.length - 1 - i].id, Team.SPECTATORS);
    }
}

function resetButton() {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (let i = 0; i < Math.max(teamRed.length, teamBlue.length); i++) {
        if (Math.max(teamRed.length, teamBlue.length) - teamRed.length - i > 0)
            room.setPlayerTeam(teamBlue[teamBlue.length - 1 - i].id, Team.SPECTATORS);
        else if (Math.max(teamRed.length, teamBlue.length) - teamBlue.length - i > 0)
            room.setPlayerTeam(teamRed[teamRed.length - 1 - i].id, Team.SPECTATORS);
        else break;
    }
    for (let i = 0; i < Math.min(teamRed.length, teamBlue.length); i++) {
        room.setPlayerTeam(
            teamBlue[Math.min(teamRed.length, teamBlue.length) - 1 - i].id,
            Team.SPECTATORS
        );
        room.setPlayerTeam(
            teamRed[Math.min(teamRed.length, teamBlue.length) - 1 - i].id,
            Team.SPECTATORS
        );
    }
}

function swapButton() {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (let player of teamBlue) {
        room.setPlayerTeam(player.id, Team.RED);
    }
    for (let player of teamRed) {
        room.setPlayerTeam(player.id, Team.BLUE);
    }
}

/* COMMAND FUNCTIONS */

/* PLAYER COMMANDS */

function leaveCommand(player, message) {
    if(player.team == 0 || players.length == 1){
        room.kickPlayer(player.id, 'Tremeu!!! kk', false);
    }else{
         room.sendAnnouncement( `Tu n√£o pode usar !bb dentro da partida!`,
            player.id, 0x76FF03, 'bold', HaxNotification.CHAT)
    }
}

function helpCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        var commandString = '[üçÅ] Comandos:';
        for (const [key, value] of Object.entries(commands)) {
            if(!['selecoes', 'brasileiros', 'outros', 'estrangeiros', 'vipuni'].includes(key)){
            if (value.desc && value.roles == Role.PLAYER) commandString += ` !${key},`;
            }
        }
        commandString+= ''
        commandString = commandString.substring(0, commandString.length-1) + '.\n';
        if(tipoVip || player.admin){
            if(tipoVip == 1){
                commandString += `Comandos VIP: !p, !corchat <C√≥digoHexadecimalDaCor> ex: FFFF00` + '.\n';
            }else if(tipoVip == 2){
                commandString += `Comandos VIP: !p, !corchat <C√≥digoHexadecimalDaCor> ex: FFFF00, !setpro, !setuni, !entrada, !furar` + '.\n';
            }else{
                commandString += `Comandos VIP: !p, !corchat <C√≥digoHexadecimalDaCor> ex: FFFF00, !setpro, !setuni, !entrada, !furar, !avatar` + '.\n';
            }
        }
        if (getRole(player) >= Role.ADMIN_TEMP) {
            commandString += `Comandos Admin:`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.ADMIN_TEMP) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':')
                commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        if (getRole(player) >= Role.MASTER) {
            commandString += `Comandos Mestre:`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.MASTER) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':') commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        commandString += "\nPara obter informa√ß√µes sobre um comando espec√≠fico, digite !ajuda <comando>.";
        room.sendAnnouncement(
            commandString,
            player.id,
            0xFF0000,
            'bold',
            HaxNotification.CHAT
        );
    } else if (msgArray.length >= 1) {
        var commandName = getCommand(msgArray[0].toLowerCase());
        if (commandName != false && commands[commandName].desc != false)
            room.sendAnnouncement(
                `\'${commandName}\' command :\n${commands[commandName].desc}`,
                player.id,
                infoColor,
                'bold',
                HaxNotification.CHAT
            );
        else
            room.sendAnnouncement(
                `O comando sobre o qual tu tentou obter informa√ß√µes n√£o existe. Para verificar todos os comandos dispon√≠veis, digite !ajuda`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
    }
}

function globalStatsCommandMe(player, message) {
    var stats = new HaxStatistics(player.name)
    if (localStorage.getItem(authArray[player.id])) {
        stats = JSON.parse(localStorage.getItem(authArray[player.id]))
    }
    var statsString = printPlayerStatsMe(stats);
    room.sendAnnouncement(
        statsString,
        player.id,
        infoColor,
        'bold',
        HaxNotification.CHAT
    );
}

function globalStatsCommand(player, message) {
    var stats = new HaxStatistics(player.name)
    if (localStorage.getItem(authArray[player.id])) {
        stats = JSON.parse(localStorage.getItem(authArray[player.id]))
    }
    var statsString = printPlayerStats(stats);
    room.sendAnnouncement(
        statsString,
        null,
        infoColor,
        'bold',
        HaxNotification.CHAT
    );
}

function renameCommand(player, message) {
    if(message.length > 20){
        room.sendAnnouncement(
            `Novo nome muito comprido!`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        return false
    }
    var msgArray = message.split(/ +/).slice(1);
    if (localStorage.getItem(authArray[player.id])) {
        var stats = JSON.parse(localStorage.getItem(authArray[player.id]));
        if (msgArray.length == 0) {
            stats.playerName = player.name;
        } else {
            stats.playerName = msgArray.join(' ');
        }
        localStorage.setItem(authArray[player.id], JSON.stringify(stats));
        room.sendAnnouncement(
            `Tu renomeou com sucesso para ${stats.playerName} !`,
            player.id,
            successColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        room.sendAnnouncement(`Tu ainda n√£o jogou um jogo nesta sala!`,
            player.id, errorColor, 'bold', HaxNotification.CHAT
        );
    }
}

function statsLeaderboardCommand(player, message) {
    var key = message.split(/ +/)[0].substring(1).toLowerCase();
    let commandStatKey = commandStatNameTranslation[key] ? commandStatNameTranslation[key] : key;
    printRankings(commandStatKey, player.id);
}

function afkCommand(player, message) {
    if (player.team == Team.SPECTATORS || players.length == 1) {
        if (AFKSet.has(player.id)) {
            if (AFKMinSet.has(player.id)) {
                room.sendAnnouncement(
                    `H√° um m√≠nimo de ${minAFKDuration} minuto de tempo AFK. N√£o abuse do comando!`,
                    player.id, errorColor, 'bold', HaxNotification.CHAT
                );
            } else {
                AFKSet.delete(player.id);
                room.sendAnnouncement(
                    `üåÖ ${player.name} n√£o est√° mais AFK!`,
                    null,
                    0xAA00FF,
                    'bold',
                    null
                );
                updateTeams();
                handlePlayersJoin();
            }
        } else {
            if (AFKCooldownSet.has(player.id)) {
                room.sendAnnouncement(
                    `Tu s√≥ pode ficar AFK a cada ${AFKCooldown} minutos. N√£o abuse do comando!`,
                    player.id, errorColor, 'bold', HaxNotification.CHAT
                );
            } else {
                AFKSet.add(player.id);
                if (!player.admin && tipoVip < 2) {
                    AFKMinSet.add(player.id);
                    AFKCooldownSet.add(player.id);
                    setTimeout(
                        (id) => {
                            AFKMinSet.delete(id);
                        },
                        minAFKDuration * 60 * 1000,
                        player.id
                    );
                    var intervalAFK = setTimeout(
                        (id) => {
                            AFKSet.delete(id);
                            //room.kickPlayer(player.id, "Tempo m√°ximo de AFK atingido! (10 minutos)", false)
                        },
                        maxAFKDuration * 60 * 1000,
                        player.id
                    );
                    setTimeout(
                        (id) => {
                            AFKCooldownSet.delete(id);
                        },
                        AFKCooldown * 60 * 1000,
                        player.id
                    );
                }
                room.setPlayerTeam(player.id, Team.SPECTATORS);
                room.sendAnnouncement(
                    `üò¥ ${player.name} agora est√° AFK!`,
                    null,
                    0xAA00FF,
                    'bold',
                    null
                );
                updateTeams();
                handlePlayersLeave();
            }
        }
    } else {
        room.sendAnnouncement(
            `Tu n√£o pode ficar AFK enquanto estiver em uma equipe!`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function afkListCommand(player, message) {
    if (AFKSet.size == 0) {
        room.sendAnnouncement(
            "üò¥ N√£o tem ningu√©m na lista de AFK.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return;
    }
    var cstm = 'üò¥ Lista de AFK: ';
    AFKSet.forEach((_, value) => {
        var p = room.getPlayer(value);
        if (p != null) cstm += p.name + `, `;
    });
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(cstm, player.id, announcementColor, 'bold', null);
}

function masterCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) == masterPassword) {
        if (!masterList.includes(authArray[player.id])) {
            room.setPlayerAdmin(player.id, true);
            adminList = adminList.filter((a) => a[0] != authArray[player.id]);
            masterList.push(authArray[player.id]);
            room.sendAnnouncement(
                `${player.name} agora √© o novo mestre!`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `Tu j√° √© um mestre!`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

function donosfazend(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) === donoPassword) {
        if (!dono.includes(authArray[player.id])) {
            room.setPlayerAdmin(player.id, true);
            masterList.push(authArray[player.id]);
            dono.push(authArray[player.id]);
            room.sendAnnouncement(
                `${player.name} agora √© o dono!`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT)
                donoPassword = gerarSenhaAleatoria()
                sendPasswordono()
        } else {
            room.sendAnnouncement(
                `Tu j√° √© um mestre!`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }else {
        room.sendAnnouncement(
            `Senha incorreta!`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}


function gerentefazend(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) == gerentePassword) {
        if (!gerente.includes(player.id));
            room.setPlayerAdmin(player.id, true);
            gerente.push(authArray[player.id]);
            room.sendAnnouncement(
                `${player.name} Logou como Gerente!`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT)
                gerentePassword = gerarSenhaAleatoria()
                sendPasswordgerente()
        } else {
            room.sendAnnouncement(
                `Voc√™ j√° est√° como Gerente!`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }

function modfazend(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) == modsPassword) {
        if (!mods.includes(player.id)){
            room.setPlayerAdmin(player.id, true)
            mods.push(player.id);
            room.sendAnnouncement(
                `${player.name} Logou como moderador!!`,
                null, announcementColor, 'bold', HaxNotification.CHAT)
                modsPassword = gerarSenhaAleatoria()
                sendPasswordmod()
        } else {
            room.sendAnnouncement(
                `Tu j√° √© um moderador!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
        }
    }
}
function admfazend(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) == admPassword) {
        if (!mods.includes(player.id)){
            room.setPlayerAdmin(player.id, true)
            adm.push(player.id);
            room.sendAnnouncement(
                `${player.name} Logou como administrador!!`,
                null, announcementColor, 'bold', HaxNotification.CHAT)
                adminPassword = gerarSenhaAleatoria()
                sendPasswordadmin()
        } else {
            room.sendAnnouncement(
                `Tu j√° √© um ADM!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
        }
    }
}
function vipCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    let numVip = parseInt(msgArray[0]) == vip1Password?1:parseInt(msgArray[0]) == vip2Password?2:parseInt(msgArray[0]) == vip3Password?3:parseInt(msgArray[0]) == vip4Password?4:0
    if(numVip ==  0){
        room.sendAnnouncement(`Senha inv√°lida!`,
        player.id, errorColor, 'bold', HaxNotification.CHAT)
        return false
    }
    setVipCommand(player, `!setvip #${player.id} ${numVip}`)
}


/* ADMIN COMMANDS */

function restartCommand(player, message) {
    instantRestart();
}

function stadiumCommand(player, message) {
    var msgArray = message.split(/ +/);
    if (gameState == State.STOP) {
        if (['!map1'].includes(msgArray[0].toLowerCase())) {
            if (!JSON.parse(futsalNovo).name == 'ELITE - X3 | Flash |') {
                room.setDefaultStadium('Big');
            } else {
                room.setCustomStadium(futsalNovo);
            }
            currentStadium = 'map1';
            
        }
        else {
            room.sendAnnouncement(
                `Est√°dio n√£o reconhecido.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            )}
    } else {
        room.sendAnnouncement(
            `Por favor, pare o jogo antes de usar este comando.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        )}
    }

function muteCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerMute = room.getPlayer(parseInt(msgArray[0]));
                var minutesMute = muteDuration;
                if (msgArray.length > 1 && parseInt(msgArray[1]) > 0) {
                    minutesMute = parseInt(msgArray[1]);
                }
                if (!playerMute.admin) {
                    var muteObj = new MutePlayer(playerMute.name, playerMute.id, authArray[playerMute.id]);
                    muteObj.setDuration(minutesMute);
                    room.sendAnnouncement(
                        `${playerMute.name} foi mutado por ${minutesMute} minuto(s).`,
                        null,
                        announcementColor,
                        'bold',
                        null
                    );
                } else {
                    room.sendAnnouncement(
                        `Tu n√£o pode silenciar um administrador.`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `N√£o h√° jogador com tal ID na sala. Digite "!ajuda mute" para obter mais informa√ß√µes.`,
                    player.id, errorColor, 'bold', HaxNotification.CHAT
                );
            }
        } else {
            room.sendAnnouncement(
                `Formato incorreto de argumento. Digite "!ajuda mute" para obter mais informa√ß√µes.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `N√∫mero incorreto de argumentos. Digite "!ajuda mute" para obter mais informa√ß√µes.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function unmuteCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerUnmute = room.getPlayer(parseInt(msgArray[0]));
                if (muteArray.getByPlayerId(playerUnmute.id) != null) {
                    var muteObj = muteArray.getByPlayerId(playerUnmute.id);
                    muteObj.remove()
                    room.sendAnnouncement(
                        `${playerUnmute.name} foi desmutado!`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.sendAnnouncement(
                        `Este jogador n√£o est√° mutado!`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `N√£o h√° jogador com tal ID na sala. Digite "!ajuda desmutar" para obter mais informa√ß√µes.`,
                    player.id, errorColor, 'bold', HaxNotification.CHAT
                );
            }
        } else if (msgArray[0].length > 0 && parseInt(msgArray[0]) > 0 && muteArray.getById(parseInt(msgArray[0])) != null) {
            var playerUnmute = muteArray.getById(parseInt(msgArray[0]));
            playerUnmute.remove();
            room.sendAnnouncement(
                `${playerUnmute.name} foi desmutado!`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `Formato incorreto de argumento. Digite "!ajuda desmutar" para obter mais informa√ß√µes.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `N√∫mero incorreto de argumentos. Digite "!ajuda desmutar" para obter mais informa√ß√µes.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}
function mostraUnisCategorias(player, message){
    room.sendAnnouncement(
            categorias,
            player.id,
            infoColor,
            'bold',
            1
        );
    return false
}
function mostraUnisSelecoes(player, message){
    room.sendAnnouncement(selecoes, player.id, infoColor, 'bold', 1)
    return false
}
function mostraUnisBrasileiros(player, message){
    room.sendAnnouncement(brasileiros, player.id, infoColor, 'bold', 1)
    return false
}
function mostraUnisOutros(player, message){
    room.sendAnnouncement(outros, player.id, infoColor, 'bold', 1)
    return false
}
function mostraUnisEstrangeiros(player, message){
    room.sendAnnouncement(estrangeiros, player.id, infoColor, 'bold', 1)
    return false
}
function mostraUnisEspeciais(player, message){
    room.sendAnnouncement(vipuni, player.id, infoColor, 'bold', 1)
    return false
}
function mostraProvocacoes(player, message){
    room.sendAnnouncement(provocacoes, player.id, infoColor, 'bold', 1)
    return false
}
function resetarStats(player, message){
    localStorage.removeItem(authArray[player.id])
    room.sendAnnouncement(`Estat√≠sticas resetadas!`, player.id, infoColor, 'bold', 1)
    return false
}
function mostraStreak(player, message){
    let msg = 'De um time composto por: '
    for(let valor of JSON.parse(localStorage.getItem('streakRecord'))){
        msg += valor[1] + ', '
    }
    msg = msg.substring(0, msg.length - 2)
    room.sendAnnouncement(`Maior sequ√™ncia de v√≠toria: ${streakMax}\n${msg}`, player.id, infoColor, 'bold', 1)
    return false
}
function voteBan(player, message){
    var msgArray = message.split(/ +/);
    if(!tipoVip >= 1){
        room.sendAnnouncement(`Apenas jogadores Vips podem abrir voteban!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
    }
    if(playersAll.some((p) => p.admin)){
            room.sendAnnouncement(`Tu s√≥ pode abrir uma vota√ß√£o quando n√£o tiver adm presente!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(!msgArray[1]){
            room.sendAnnouncement(`Tu precisa informar o ID do jogador!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(modoVoteBan || modoVoteMute){
            room.sendAnnouncement(`J√° existe uma vota√ß√£o em andamento!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        playerVote = room.getPlayer(parseInt(msgArray[1].substring(1)))
        if(!playerVote){
            room.sendAnnouncement(`ID do jogador inv√°lido!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(playerVote.id == player.id){
            room.sendAnnouncement(`Tu n√£o pode abrir vota√ß√£o para si mesmo!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(players.length >= 9){
            modoVoteBan = true
            room.sendAnnouncement(`${player.name} abriu uma vota√ß√£o para BANIR o jogador: ${playerVote.name}\nSe tu concorda em bani-lo digite !s!`,
                null, announcementColor, 'bold', HaxNotification.CHAT)
            setTimeout(() => {
                if(votos >= 66,66 * playersAll.length / 100){
                    room.sendAnnouncement(`Fim da vota√ß√£o! (Aprovada)\nO jogador foi banido!`, 
                        null, errorColor, 'bold', HaxNotification.CHAT)
                    room.kickPlayer(playerVote.id, 'Banido por vota√ß√£o!', true)
                }else{
                    room.sendAnnouncement(`Fim da vota√ß√£o! (Negada)\nNumeros de votos insuficientes. (Necess√°rio 66,66% dos jogadores presentes)`, 
                        null, errorColor, 'bold', HaxNotification.CHAT)
                }
                modoVoteBan = false
                votosBan = 0
                votouBan = []
		return false
            }, 30 * 1000)
        }else{
            room.sendAnnouncement(`Tu s√≥ pode iniciar uma vota√ß√£o com pelo menos 9 jogadores na sala!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
        }
}
function voteMute(player, message){
    var msgArray = message.split(/ +/);
    if(!tipoVip >= 1){
        room.sendAnnouncement(`Apenas jogadores Vips podem abrir votemute!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
    }
    if(playersAll.some((p) => p.admin)){
            room.sendAnnouncement(`Tu s√≥ pode abrir uma vota√ß√£o quando n√£o tiver adm presente!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(!msgArray[1]){
            room.sendAnnouncement(`Tu precisa informar o ID do jogador!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(modoVoteBan || modoVoteMute){
            room.sendAnnouncement(`J√° existe uma vota√ß√£o em andamento!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        playerVote = room.getPlayer(parseInt(msgArray[1].substring(1)))
        if(!playerVote){
            room.sendAnnouncement(`ID do jogador inv√°lido!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(playerVote.id == player.id){
            room.sendAnnouncement(`Tu n√£o pode abrir vota√ß√£o para si mesmo!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(players.length >= 9){
            modoVoteMute = true
            room.sendAnnouncement(`${player.name} abriu uma vota√ß√£o para MUTAR o jogador: ${playerVote.name}\nSe tu concorda em bani-lo digite !s!`,
                null, announcementColor, 'bold', HaxNotification.CHAT)
            setTimeout(() => {
                if(votosMute >= 66,66 * playersAll.length / 100){
                    room.sendAnnouncement(`Fim da vota√ß√£o! (Aprovada)\nO jogador foi mutado!`, 
                        null, errorColor, 'bold', HaxNotification.CHAT)
                    room.kickPlayer(playerVote.id, 'Banido por vota√ß√£o!', true)
                }else{
                    room.sendAnnouncement(`Fim da vota√ß√£o! (Negada)\nNumeros de votos insuficientes. (Necess√°rio 66,66% dos jogadores presentes)`, 
                        null, errorColor, 'bold', HaxNotification.CHAT)
                }
                modoVoteMute = false
                votosMute = 0
                votouMute = []
		return false
            }, 30 * 1000)
        }else{
            room.sendAnnouncement(`Tu s√≥ pode iniciar uma vota√ß√£o com pelo menos 9 jogadores na sala!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
        }
}
function muteListCommand(player, message) {
    if (muteArray.list.length == 0) {
        room.sendAnnouncement(
            "üîá N√£o h√° ningu√©m na lista de mutados.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = 'üîá Lista mutados: ';
    for (let mute of muteArray.list) {
        cstm += mute.name + `[${mute.id}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}
 
/* MASTER COMMANDS */

function clearbansCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        room.clearBans();
        room.sendAnnouncement(
            '‚úîÔ∏è Banidos resetados.',
            null,
            announcementColor,
            'bold',
            null
        );
        banList = [];
    } else if (msgArray.length == 1) {
        if (parseInt(msgArray[0]) > 0) {
            var ID = parseInt(msgArray[0]);
            room.clearBan(ID);
            if (banList.length != banList.filter((p) => p[1] != ID).length) {
                room.sendAnnouncement(
                    `‚úîÔ∏è ${banList.filter((p) => p[1] == ID)[0][0]} foi desbanido da sala!`,
                    null,
                    announcementColor,
                    'bold',
                    null
                );
            } else {
                room.sendAnnouncement(
                    `O ID que voc√™ digitou n√£o tem um banimento associado. Digite "!ajuda clearbans" para mais informa√ß√µes.`,
                    player.id, errorColor, 'bold', HaxNotification.CHAT
                );
            }
            banList = banList.filter((p) => p[1] != ID);
        } else {
            room.sendAnnouncement(
                `ID inv√°lido inserido. Digite "!ajuda clearbans" para mais informa√ß√µes.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `N√∫mero incorreto de argumentos. Digite "!ajuda clearbans" para mais informa√ß√µes.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function banListCommand(player, message) {
    if (banList.length == 0) {
        room.sendAnnouncement(
            "üì¢ N√£o h√° ningu√©m na lista de banimentos.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = 'üì¢ Lista banidos: ';
    for (let ban of banList) {
        cstm += ban[0] + `[${ban[1]}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function adminListCommand(player, message) {
    if (adminList.length == 0) {
        room.sendAnnouncement(
            "üì¢ N√£o h√° ningu√©m na lista de administradores.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = 'üì¢ Lista admin: ';
    for (let i = 0; i < adminList.length; i++) {
        cstm += adminList[i][1] + `[${i+1}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    )
}
function removerAdmin(player, message) {
    //if(msgArray[1] <= adminlist.length){
        //adminlist.splice(msgArray[1]-1,1)
        /*if(msgArray[2]){
        room.setPlayerAdmin(msgArray[2], false)
        }*/
        room.sendAnnouncement('Admin removido com sucesso!',
            player.id, announcementColor, 'bold', null)
    //}
    return false
}
function showVips(player, message){
    let i = 1
    let vipsNames = ""
    if(vips.length > 0){
    vips.forEach(function(item) {
        vipsNames += item.name + '[' + i + '], '
        i++
    })
    room.sendAnnouncement(`Lista de jogadores Vips:\n` + vipsNames, 
    player.id, announcementColor, 'bold', null)
    }else{
    room.sendAnnouncement(`Lista de jogadores Vips Vazia!`, 
    player.id, announcementColor, 'bold', null)
    }
}

function removerVip(player, message){
    var msgArray = message.split(/ +/).slice(1)
    if(vips.length > 0 && vips[msgArray[0]-1]){
    room.sendAnnouncement(`VIP do jogador ${vips[msgArray[0]-1].name} removido!`, 
    player.id, announcementColor, 'bold', null)
    vips.splice(msgArray[0]-1,1)
    }else{
    room.sendAnnouncement(`ID de jogador Vip inv√°lido!`, 
    player.id, errorColor, 'bold', null)
    }
}

function setVipCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            var numVip = msgArray[1]
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null && numVip != null) {
                var playerVip = room.getPlayer(parseInt(msgArray[0]))
                if(numVip == 1){
                    var resSetVip = false
                    if(vips[authArray[playerVip.id]]){
                        resSetVip = true
                    }
                    if (!resSetVip) {
                        vips[authArray[playerVip.id]] = 
                            {
                                name: playerVip.name,
                                auth: authArray[playerVip.id],
                                tipoVip: 1,
                                corChat: "",
                                fonte: 0,
                                pausarJogoOFF: false,
                                furarFila: false,
                                provos: {},
                                unis: {},
                                avatarGol: [],
                                msgEntrada: ''
                            }
                            room.sendAnnouncement(`${playerVip.name} agora √© VIP!`,
                                null, announcementColor, 'bold', HaxNotification.CHAT)
                            vip1Password = getRandomInt2(10000, 99999)
                            sendPasswordVip()
                    }else{
                        delete vips[authArray[playerVip.id]]
                        room.sendAnnouncement(`${playerVip.name} n√£o √© mais VIP!`,
                            null, announcementColor, 'bold', HaxNotification.CHAT)
                    }
                }else if(numVip == 2){
                    var resSetVip = false
                    if(vips[authArray[playerVip.id]]){
                        resSetVip = true
                    }
                    if (!resSetVip) {
                        vips[authArray[playerVip.id]] =
                             {
                                name: playerVip.name,
                                auth: authArray[playerVip.id],
                                tipoVip: 2,
                                corChat: "",
                                fonte: 0,
                                pausarJogoOFF: false,
                                furarFila: true,
                                provos: {},
                                unis: {},
                                avatarGol: [],
                                msgEntrada: ''
                            }
                        room.sendAnnouncement(
                            `${playerVip.name} agora √© VIP!`,
                            null,
                            announcementColor,
                            'bold',
                            HaxNotification.CHAT)
                            vip2Password = getRandomInt2(100000, 199999)
                            sendPasswordVip()
                }else{
                    delete vips[authArray[playerVip.id]]
                    room.sendAnnouncement(`${playerVip.name} n√£o √© mais VIP!`,
                        null, announcementColor, 'bold', HaxNotification.CHAT)
                }
                }else if (numVip == 3){
                    var resSetVip = false
                    if(vips[authArray[playerVip.id]]){
                        resSetVip = true
                    }
                    if (!resSetVip) {
                        vips[authArray[playerVip.id]] =
                            {
                                name: playerVip.name,
                                auth: authArray[playerVip.id],
                                tipoVip: 3,
                                corChat: "",
                                fonte: 0,
                                pausarJogoOFF: false,
                                furarFila: true,
                                provos: {},
                                unis: {},
                                avatarGol: [],
                                msgEntrada: ''
                            }
                        room.sendAnnouncement(`${playerVip.name} agora √© VIP!`,
                            null, announcementColor, 'bold', HaxNotification.CHAT)
                        vip3Password = getRandomInt2(200000, 299999)
                        sendPasswordVip()
                }else{
                    delete vips[authArray[playerVip.id]]
                    room.sendAnnouncement(`${playerVip.name} n√£o √© mais VIP!`,
                        null, announcementColor, 'bold', HaxNotification.CHAT)
                }
                }else if (numVip == 4){
                    var resSetVip = false
                    if(vips[authArray[playerVip.id]]){
                        resSetVip = true
                    }
                    if (!resSetVip) {
                        vips[authArray[playerVip.id]] =
                            {
                                name: playerVip.name,
                                auth: authArray[playerVip.id],
                                tipoVip: 4,
                                corChat: "",
                                fonte: 0,
                                pausarJogoOFF: false,
                                furarFila: true,
                                provos: {},
                                unis: {},
                                avatarGol: [],
                                msgEntrada: ''
                            }
                        room.sendAnnouncement(`${playerVip.name} agora √© VIP!`,
                            null, announcementColor, 'bold', HaxNotification.CHAT)
                        vip4Password = getRandomInt2(300000, 499999)
                        sendPasswordVip()
                }else{
                    delete vips[authArray[playerVip.id]]
                    room.sendAnnouncement(`${playerVip.name} n√£o √© mais VIP!`,
                        null, announcementColor, 'bold', HaxNotification.CHAT)
                }
            } else {
            room.sendAnnouncement(
                `N√£o h√° jogador com tal ID na sala. Digite "!ajuda setvip" para obter mais informa√ß√µes.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT)
        }
        } else {
            room.sendAnnouncement(
                `Formato incorreto para seu argumento. Digite "!ajuda setvip" para obter mais informa√ß√µes.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT)
        }
    } else {
        room.sendAnnouncement(
            `N√∫mero incorreto de argumentos. Digite "!ajuda setvip" para obter mais informa√ß√µes.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}
}
function setAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]))
                if (!adminList.map((a) => a[0]).includes(authArray[playerAdmin.id])) {
                    if (!masterList.includes(authArray[playerAdmin.id])) {
                        room.setPlayerAdmin(playerAdmin.id, true);
                        adminList.push([authArray[playerAdmin.id], playerAdmin.name]);
                        room.sendAnnouncement(
                            `${playerAdmin.name} agora √© o novo admin!`,
                            null, announcementColor, 'bold', HaxNotification.CHAT)
                    } else {
                        room.setPlayerAdmin(playerAdmin.id, false);
                        masterList.splice(masterList.indexOf(authArray[playerAdmin.id],1))
                        room.sendAnnouncement(                    
                            `Este jogador n√£o √© mais um mestre!`,
                            player.id, errorColor, 'bold', HaxNotification.CHAT)
                    }
                } else {
                    room.setPlayerAdmin(playerAdmin.id, false);
                    adminList.splice(adminList.indexOf([authArray[playerAdmin.id], playerAdmin.name],1))
                    room.sendAnnouncement(
                        `Este jogador n√£o √© mais um administrador permanente!`,
                        player.id, errorColor, 'bold', HaxNotification.CHAT)
                }
            } else {
                room.sendAnnouncement(
                    `N√£o h√° jogador com tal ID na sala. Digite "!ajuda setadmin" para obter mais informa√ß√µes.`,
                    player.id, errorColor, 'bold', HaxNotification.CHAT
                );
            }
        } else {
            room.sendAnnouncement(
                `Formato incorreto para seu argumento. Digite "!ajuda setadmin" para obter mais informa√ß√µes.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `N√∫mero incorreto de argumentos. Digite "!ajuda setadmin" para obter mais informa√ß√µes.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function sendLinkDiscord(player, message){
    room.sendAnnouncement(`Link do nosso discord: https://discord.gg/rqF5aDBnZJ`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            )
}

function passwordCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray.length == 1 && msgArray[0] == '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `A senha da sala foi removida.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        }
        roomPassword = msgArray.join(' ');
        room.setPassword(roomPassword);
        room.sendAnnouncement(
            `A senha da sala foi definida como ${roomPassword}`,
            player.id,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        if (roomPassword != '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `A senha da sala foi removida.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `A sala atualmente n√£o tem uma senha. Digite "!ajuda password" para obter mais informa√ß√µes.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* GAME FUNCTIONS */

function checkTime() {
    const scores = room.getScores();
    if (game != undefined) game.scores = scores;
    if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0 && playSituation == Situation.PLAY) {
        if (scores.red != scores.blue) {
            if (!checkTimeVariable) {
                checkTimeVariable = true;
                setTimeout(() => {
                    checkTimeVariable = false;
                }, 3000);
                scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
                stopTimeout = setTimeout(() => {
                    room.stopGame();
                }, 2000);
            }
            return;
        }
        if (drawTimeLimit != 0) {
            goldenGoal = true;
            room.sendAnnouncement(
                'Tempo de jogo atingido! +1m de acr√©scimo.\n‚öΩ Gol de ouro!!!',
                null,
                0xffefd6,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
    if (Math.abs(scores.time - drawTimeLimit * 60 - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
        if (!checkTimeVariable) {
            checkTimeVariable = true;
            setTimeout(() => {
                checkTimeVariable = false;
            }, 10);
            endGame(Team.SPECTATORS);
            room.stopGame();
            goldenGoal = false;
        }
    }
}

function instantRestart() {
    room.stopGame();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function resumeGame() {
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 1000);
    setTimeout(() => {
        room.pauseGame(false);
    }, 500);
}

function endGame(winner) {
    if (players.length >= 2 * teamSize - 1) activateChooseMode();
    const scores = room.getScores();
    game.scores = scores;
    lastWinner = winner;
    endGameVariable = true;
    if (winner == Team.RED) {
        streak++;
        room.sendAnnouncement(
            `‚ú® Equipe Vermelha ganhou ${scores.red} - ${scores.blue}!`,
            null,
            redColor,
            'bold',
            HaxNotification.CHAT
        )
        if(players.length >= 2 * teamSize){
            let vermelho = []
            for (let player of teamRed) {
                vermelho.push([player.id, player.name])
            }
            if(JSON.stringify(lastTeamStreak) == JSON.stringify(vermelho)){
                streakRecord++
            }else{
                streakRecord = 1
                lastTeamStreak = []
                for (let player of teamRed) {
                    lastTeamStreak.push([player.id, player.name])
                }
            }
            room.sendAnnouncement(`üîÅ Sequ√™ncia de Vit√≥rias por um time composto pelos mesmos jogadores: ${streakRecord}`,
            null, redColor, 'bold', HaxNotification.CHAT)
        }
    } else if (winner == Team.BLUE) {
        streak = 1;
        room.sendAnnouncement(`‚ú® Equipe Azul ganhou ${scores.blue} - ${scores.red}!`,
            null, blueColor, 'bold', HaxNotification.CHAT)
        if(players.length >= 2 * teamSize){
            let azul = []
            for (let player of teamRed) {
                azul.push([player.id, player.name])
            }
            if(JSON.stringify(lastTeamStreak) == JSON.stringify(azul)){
                streakRecord++
            }else{
                streakRecord = 1
                lastTeamStreak = []
                for (let player of teamBlue) {
                    lastTeamStreak.push([player.id, player.name])
                }
            }
            room.sendAnnouncement(`üîÅ Sequ√™ncia de Vit√≥rias por um time composto pelos mesmos jogadores: ${streakRecord}`,
            null, blueColor, 'bold', HaxNotification.CHAT)
        }
    } else {
        streak = 0;
        room.sendAnnouncement(
            'üí§ Empate! | Tempo esgotado |',
            null,
            0xffefd6,
            'bold',
            HaxNotification.CHAT
        );
    }
    if(streakRecord > streakMax){
        streakMax = streakRecord
        localStorage.setItem('streakRecord', JSON.stringify(lastTeamStreak))
    }
    let possessionRedPct = (possession[0] / (possession[0] + possession[1])) * 100;
    let possessionBluePct = 100 - possessionRedPct;
    let possessionString = `üî¥ ${possessionRedPct.toFixed(0)}% - ${possessionBluePct.toFixed(0)}% üîµ`;
    let actionRedPct = (actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1])) * 100;
    let actionBluePct = 100 - actionRedPct;
    let actionString = `üî¥ ${actionRedPct.toFixed(0)}% - ${actionBluePct.toFixed(0)}% üîµ`;
    let CSString = getCSString(scores);
    room.sendAnnouncement(
        `üìä Posse: üî¥ ${possessionString} | ` +
        `üìä Zona de a√ß√£o: üî¥ ${actionString} | ` +
        `${CSString}`,
        null,
        0xffefd6,
        'bold',
        HaxNotification.NONE
    );
    updateStats();
}

/* CHOOSING FUNCTIONS */

function activateChooseMode() {
    chooseMode = true;
    slowMode = chooseModeSlowMode;
    room.sendAnnouncement(
        `üê¢ Modo chat lento alterado para escolher em: ${chooseModeSlowMode}s.`,
        null,
        announcementColor,
        'bold',
        HaxNotification.CHAT
    );
}

function deactivateChooseMode() {
    chooseMode = false;
    clearTimeout(timeOutCap);
    if (slowMode != defaultSlowMode) {
        slowMode = defaultSlowMode;
        room.sendAnnouncement(
            `üê¢ Modo chat lento alterado para normal em: ${defaultSlowMode}s.`,
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    }
    redCaptainChoice = '';
    blueCaptainChoice = '';
}

function getSpecList(player) {
    if (player == null) return null;
    var cstm = 'Players : ';
    for (let i = 0; i < teamSpec.length; i++) {
        cstm += teamSpec[i].name + `[${i + 1}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        infoColor,
        'bold',
        HaxNotification.CHAT
    );
}

function choosePlayer() {
    clearTimeout(timeOutCap);
    let captain;
    if (teamRed.length <= teamBlue.length && teamRed.length != 0) {
        captain = teamRed[0];
    } else if (teamBlue.length < teamRed.length && teamBlue.length != 0) {
        captain = teamBlue[0];
    }
    if (captain != null) {
        room.sendAnnouncement(
            "Para escolher um jogador, digite seu n√∫mero na lista fornecida ou use 'top', 'random' ou 'bottom'.",
            captain.id,
            infoColor,
            'bold',
            HaxNotification.MENTION
        );
        timeOutCap = setTimeout(
            (player) => {
                room.sendAnnouncement(
                    `Apresse-se ${player.name}, apenas ${Number.parseInt(String(chooseTime / 2))} segundos restantes para escolher!`,
                    player.id,
                    warningColor,
                    'bold',
                    HaxNotification.MENTION
                );
                timeOutCap = setTimeout(
                    (player) => {
                        room.kickPlayer(
                            player.id,
                            "Tu n√£o escolheu a tempo!",
                            false
                        )
                    },
                    chooseTime * 500,
                    captain
                );
            },
            chooseTime * 1000,
            captain
        );
    }
    if (teamRed.length != 0 && teamBlue.length != 0) {
        getSpecList(teamRed.length <= teamBlue.length ? teamRed[0] : teamBlue[0]);
    }
}

function chooseModeFunction(player, message) {
    var msgArray = message.split(/ +/);
    if (player.id == teamRed[0].id || player.id == teamBlue[0].id) {
        if (teamRed.length <= teamBlue.length && player.id == teamRed[0].id) {
            if (['top', 'auto'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(teamSpec[0].id, Team.RED);
                redCaptainChoice = 'top';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} escolheu Top!`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (['random', 'rand'].includes(msgArray[0].toLowerCase())) {
                var r = getRandomInt(teamSpec.length);
                room.setPlayerTeam(teamSpec[r].id, Team.RED);
                redCaptainChoice = 'random';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} escolheu o Random!`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (['bottom', 'bot'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(teamSpec[teamSpec.length - 1].id, Team.RED);
                redCaptainChoice = 'bottom';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} escolheu o Bottom!`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (!Number.isNaN(Number.parseInt(msgArray[0]))) {
                if (Number.parseInt(msgArray[0]) > teamSpec.length || Number.parseInt(msgArray[0]) < 1) {
                    room.sendAnnouncement(
                        `Seu n√∫mero √© inv√°lido!`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.setPlayerTeam(
                        teamSpec[Number.parseInt(msgArray[0]) - 1].id,
                        Team.RED
                    );
                    room.sendAnnouncement(
                        `${player.name} escolheu ${teamSpec[Number.parseInt(msgArray[0]) - 1].name} !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else return false;
            return true;
        }
        if (teamRed.length > teamBlue.length && player.id == teamBlue[0].id) {
            if (['top', 'auto'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
                blueCaptainChoice = 'top';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} escolheu Top!`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (['random', 'rand'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(
                    teamSpec[getRandomInt(teamSpec.length)].id,
                    Team.BLUE
                );
                blueCaptainChoice = 'random';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} escolheu Random!`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (['bottom', 'bot'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(teamSpec[teamSpec.length - 1].id, Team.BLUE);
                blueCaptainChoice = 'bottom';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} escolheu Bottom!`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (!Number.isNaN(Number.parseInt(msgArray[0]))) {
                if (Number.parseInt(msgArray[0]) > teamSpec.length || Number.parseInt(msgArray[0]) < 1) {
                    room.sendAnnouncement(
                        `Seu n√∫mero √© inv√°lido!`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.setPlayerTeam(
                        teamSpec[Number.parseInt(msgArray[0]) - 1].id,
                        Team.BLUE
                    );
                    room.sendAnnouncement(
                        `${player.name} escolheu ${teamSpec[Number.parseInt(msgArray[0]) - 1].name} !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else return false;
            return true;
        }
    }
}

function checkCaptainLeave(player) {
    if (
        (teamRed.findIndex((red) => red.id == player.id) == 0 && chooseMode && teamRed.length <= teamBlue.length) ||
        (teamBlue.findIndex((blue) => blue.id == player.id) == 0 && chooseMode && teamBlue.length < teamRed.length)
    ) {
        choosePlayer();
        capLeft = true;
        setTimeout(() => {
            capLeft = false;
        }, 10);
    }
}

function slowModeFunction(player, message) {
    if (!player.admin) {
        if(tipoVip >= 2){
            if (!SMSet.has(player.id)) {
            SMSet.add(player.id);
            setTimeout(
                (number) => {
                    SMSet.delete(number);
                },
                1.5 * 1000,
                player.id
            );
        } else {
            return true;
        }
        return false
        }
        if (!SMSet.has(player.id)) {
            SMSet.add(player.id);
            setTimeout(
                (number) => {
                    SMSet.delete(number);
                },
                slowMode * 1000,
                player.id
            );
        } else {
            return true;
        }
    }
    return false;
}

/* PLAYER FUNCTIONS */

function updateTeams() {
    playersAll = room.getPlayerList();
    players = playersAll.filter((p) => !AFKSet.has(p.id))
    teamRed = players.filter((p) => p.team == Team.RED);
    teamBlue = players.filter((p) => p.team == Team.BLUE);
    teamSpec = players.filter((p) => p.team == Team.SPECTATORS);
}

function updateAdmins(excludedPlayerID = 0) {
    if (players.length != 0 && players.filter((p) => p.admin).length < maxAdmins) {
        let playerArray = players.filter((p) => p.id != excludedPlayerID && !p.admin);
        let arrayID = playerArray.map((player) => player.id);
        room.setPlayerAdmin(Math.min(...arrayID), true);
    }
}

function getRole(player) {
    return (
        !!masterList.find((a) => a == authArray[player.id]) * 2 +
        !!adminList.find((a) => a[0] == authArray[player.id]) * 1 +
        player.admin * 1
    );
}

function ghostKickHandle(oldP, newP) {
    var teamArrayId = getTeamArray(oldP.team).map((p) => p.id);
    teamArrayId.splice(teamArrayId.findIndex((id) => id == oldP.id), 1, newP.id);

    room.kickPlayer(oldP.id, 'Ghost kick', false);
    room.setPlayerTeam(newP.id, oldP.team);
    room.setPlayerAdmin(newP.id, oldP.admin);
    room.reorderPlayers(teamArrayId, true);

    if (oldP.team != Team.SPECTATORS && playSituation != Situation.STOP) {
        var discProp = room.getPlayerDiscProperties(oldP.id);
        room.setPlayerDiscProperties(newP.id, discProp);
    }
}

/* ACTIVITY FUNCTIONS */

function handleActivityPlayer(player) {
    let pComp = getPlayerComp(player);
    if (pComp != null) {
        pComp.inactivityTicks++;
        if (pComp.inactivityTicks == 60 * (10)) {
            room.sendAnnouncement(
                `‚õî ${player.name}, se voc√™ n√£o se mover ou enviar uma mensagem nos pr√≥ximos ${Math.floor(12)} segundos, voc√™ ser√° expulso!`,
                player.id,
                warningColor,
                'bold',
                HaxNotification.MENTION
            );
            return;
        }
        if (pComp.inactivityTicks == 60 * (16)) {
            room.sendAnnouncement(
                `‚õî ${player.name}, se voc√™ n√£o se mover ou enviar uma mensagem nos pr√≥ximos ${Math.floor(6)} segundos, voc√™ ser√° expulso!`,
                player.id,
                warningColor,
                'bold',
                HaxNotification.MENTION
            );
            return;
        }
        if (pComp.inactivityTicks >= 60 * 22) {
            pComp.inactivityTicks = 0;
            if (game.scores.time <= afkLimit - 0.5) {
                setTimeout(() => {
                    !chooseMode ? instantRestart() : room.stopGame();
                }, 10);
            }
            room.kickPlayer(player.id, 'AFK', false);
        }
    }
}

function handleActivityPlayerTeamChange(changedPlayer) {
    if (changedPlayer.team == Team.SPECTATORS) {
        let pComp = getPlayerComp(changedPlayer);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivityStop() {
    for (let player of players) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivity() {
    if (gameState === State.PLAY && players.length > 1) {
        for (let player of teamRed) {
            handleActivityPlayer(player);
        }
        for (let player of teamBlue) {
            handleActivityPlayer(player);
        }
    }
}

/* LINEUP FUNCTIONS */

function getStartingLineups() {
    var compositions = [[], []];
    for (let player of teamRed) {
        compositions[0].push(
            new PlayerComposition(player, authArray[player.id], [0], [])
        );
    }
    for (let player of teamBlue) {
        compositions[1].push(
            new PlayerComposition(player, authArray[player.id], [0], [])
        );
    }
    return compositions;
}

function handleLineupChangeTeamChange(changedPlayer) {
    if (gameState != State.STOP) {
        var playerLineup;
        if (changedPlayer.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[0][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id],
                    [game.scores.time],
                    []
                );
                game.playerComp[0].push(playerLineup);
            }
        } else if (changedPlayer.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[1][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id],
                    [game.scores.time],
                    []
                );
                game.playerComp[1].push(playerLineup);
            }
        }
        if (teamRed.some((r) => r.id == changedPlayer.id)) {
            // player leaves red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id]);
            playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (teamBlue.some((r) => r.id == changedPlayer.id)) {
            // player leaves blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id]);
            playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

function handleLineupChangeLeave(player) {
    if (playSituation != Situation.STOP) {
        if (player.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[player.id]);
            var playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (player.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[player.id]);
            var playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

/* TEAM BALANCE FUNCTIONS */

function balanceTeams() {
    if (!chooseMode) {
        if (players.length == 0) {
            room.stopGame();
            room.setScoreLimit(scoreLimit);
            room.setTimeLimit(timeLimit);
        } else if (players.length == 1 && teamRed.length == 0) {
            room.setPlayerTeam(players[0].id, Team.RED)
            instantRestart()
        } else if (Math.abs(teamRed.length - teamBlue.length) == teamSpec.length && teamSpec.length > 0) {
            const n = Math.abs(teamRed.length - teamBlue.length);
            if (players.length == 2) {
                instantRestart();
            }
            if (teamRed.length > teamBlue.length) {
                for (var i = 0; i < n; i++) {
                    room.setPlayerTeam(teamSpec[i].id, Team.BLUE);
                }
            } else {
                for (var i = 0; i < n; i++) {
                    room.setPlayerTeam(teamSpec[i].id, Team.RED);
                }
            }
        } else if (Math.abs(teamRed.length - teamBlue.length) > teamSpec.length) {
            const n = Math.abs(teamRed.length - teamBlue.length);
            if (players.length == 1) {
                instantRestart();
                room.setPlayerTeam(players[0].id, Team.RED);
                return;
            } else if (teamSize > 2 && players.length == 5) {
                instantRestart();
            }
            if (players.length == teamSize * 2 - 1) {
                teamRedStats = [];
                teamBlueStats = [];
            }
            if (teamRed.length > teamBlue.length) {
                for (var i = 0; i < n; i++) {
                    room.setPlayerTeam(
                        teamRed[teamRed.length - 1 - i].id,
                        Team.SPECTATORS
                    );
                }
            } else {
                for (var i = 0; i < n; i++) {
                    room.setPlayerTeam(
                        teamBlue[teamBlue.length - 1 - i].id,
                        Team.SPECTATORS
                    );
                }
            }
        } else if (Math.abs(teamRed.length - teamBlue.length) < teamSpec.length && teamRed.length != teamBlue.length) {
            room.pauseGame(true);
            activateChooseMode();
            choosePlayer();
        } else if (teamSpec.length >= 2 && teamRed.length == teamBlue.length && teamRed.length < teamSize) {
            if (teamRed.length == 2) {
                instantRestart();
            }
            topButton();
        }
    }
}

function handlePlayersJoin() {
    if (chooseMode) {
        getSpecList(teamRed.length <= teamBlue.length ? teamRed[0] : teamBlue[0]);
    }
    balanceTeams();
}

function handlePlayersLeave() {
    if (gameState != State.STOP) {
        var scores = room.getScores();
        if (players.length >= 2 * teamSize && scores.time >= (5 / 6) * game.scores.timeLimit && teamRed.length != teamBlue.length) {
            var rageQuitCheck = false;
            if (teamRed.length < teamBlue.length) {
                if (scores.blue - scores.red == 2) {
                    endGame(Team.BLUE);
                    rageQuitCheck = true;
                }
            } else {
                if (scores.red - scores.blue == 2) {
                    endGame(Team.RED);
                    rageQuitCheck = true;
                }
            }
            if (rageQuitCheck) {
                room.sendAnnouncement(
                    "Ragequit detectado, o jogo terminou.",
                    null,
                    infoColor,
                    'bold',
                    HaxNotification.MENTION
                )
                stopTimeout = setTimeout(() => {
                    room.stopGame();
                }, 100);
                return;
            }
        }
    }
    if (chooseMode) {
        if (teamSize > 2 && players.length == 5) {
            /*setTimeout(() => {
                stadiumCommand(emptyPlayer, `!classic`);
            }, 5);*/
        }
        if (teamRed.length == 0 || teamBlue.length == 0) {
            room.setPlayerTeam(teamSpec[0].id, teamRed.length == 0 ? Team.RED : Team.BLUE);
            return;
        }
        if (Math.abs(teamRed.length - teamBlue.length) == teamSpec.length) {
            deactivateChooseMode();
            resumeGame();
            var b = teamSpec.length;
            if (teamRed.length > teamBlue.length) {
                for (var i = 0; i < b; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
                    }, 5 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 5 * b);
            } else {
                for (var i = 0; i < b; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        room.setPlayerTeam(teamSpec[0].id, Team.RED);
                    }, 5 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 5 * b);
            }
            return;
        }
        if (streak == 0 && gameState == State.STOP) {
            if (Math.abs(teamRed.length - teamBlue.length) == 2) {
                var teamIn = teamRed.length > teamBlue.length ? teamRed : teamBlue;
                room.setPlayerTeam(teamIn[teamIn.length - 1].id, Team.SPECTATORS)
            }
        }
        if (teamRed.length == teamBlue.length && teamSpec.length < 2) {
            deactivateChooseMode();
            resumeGame();
            return;
        }

        if (capLeft) {
            choosePlayer();
        } else {
            getSpecList(teamRed.length <= teamBlue.length ? teamRed[0] : teamBlue[0]);
        }
    }
    balanceTeams();
}

function handlePlayersTeamChange(byPlayer) {
    if (chooseMode && !removingPlayers && byPlayer == null) {
        if (Math.abs(teamRed.length - teamBlue.length) == teamSpec.length) {
            deactivateChooseMode();
            resumeGame();
            var b = teamSpec.length;
            if (teamRed.length > teamBlue.length) {
                for (var i = 0; i < b; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
                    }, 5 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 5 * b);
            } else {
                for (var i = 0; i < b; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        room.setPlayerTeam(teamSpec[0].id, Team.RED);
                    }, 5 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 5 * b);
            }
            return;
        } else if (
            (teamRed.length == teamSize && teamBlue.length == teamSize) ||
            (teamRed.length == teamBlue.length && teamSpec.length < 2)
        ) {
            deactivateChooseMode();
            resumeGame();
        } else if (teamRed.length <= teamBlue.length && redCaptainChoice != '') {
            if (redCaptainChoice == 'top') {
                room.setPlayerTeam(teamSpec[0].id, Team.RED);
            } else if (redCaptainChoice == 'random') {
                var r = getRandomInt(teamSpec.length);
                room.setPlayerTeam(teamSpec[r].id, Team.RED);
            } else {
                room.setPlayerTeam(teamSpec[teamSpec.length - 1].id, Team.RED);
            }
            return;
        } else if (teamBlue.length < teamRed.length && blueCaptainChoice != '') {
            if (blueCaptainChoice == 'top') {
                room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
            } else if (blueCaptainChoice == 'random') {
                var r = getRandomInt(teamSpec.length);
                room.setPlayerTeam(teamSpec[r].id, Team.BLUE);
            } else {
                room.setPlayerTeam(teamSpec[teamSpec.length - 1].id, Team.BLUE);
            }
            return;
        } else {
            choosePlayer();
        }
    }
}

function handlePlayersStop(byPlayer) {
    if (byPlayer == null && endGameVariable) {
        if (chooseMode) {
            if (players.length == 2 * teamSize) {
                chooseMode = false;
                resetButton();
                for (var i = 0; i < teamSize; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        randomButton();
                    }, 200 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 200 * teamSize);
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            } else {
                if (lastWinner == Team.RED) {
                    blueToSpecButton();
                } else if (lastWinner == Team.BLUE) {
                    redToSpecButton();
                    setTimeout(() => {
                        swapButton();
                    }, 10);
                } else {
                    resetButton();
                }
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                setTimeout(() => {
                    topButton();
                }, 300);
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 300);
            }
        } else {
            if(players.length == 1){
                instantRestart()
            }
            if (players.length == 2) {
                if (lastWinner == Team.BLUE) {
                    swapButton();
                }
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            } else if (players.length == 3 || players.length >= 2 * teamSize + 1) {
                if (lastWinner == Team.RED) {
                    blueToSpecButton();
                } else {
                    redToSpecButton();
                    setTimeout(() => {
                        swapButton();
                    }, 5);
                }
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                setTimeout(() => {
                    topButton();
                }, 200);
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 300);
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            } else if (players.length == 4) {
                resetButton();
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                setTimeout(() => {
                    randomButton();
                    setTimeout(() => {
                        randomButton();
                    }, 500);
                }, 500);
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 2000);
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            } else if (players.length == 5 || players.length >= 2 * teamSize + 1) {
                if (lastWinner == Team.RED) {
                    blueToSpecButton();
                } else {
                    redToSpecButton();
                    setTimeout(() => {
                        swapButton();
                    }, 5);
                }
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 200);
                setTimeout(() => {
                    topButton();
                }, 200);
                activateChooseMode();
            } else if (players.length == 6) {
                resetButton();
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 1500);
                setTimeout(() => {
                    randomButton();
                    setTimeout(() => {
                        randomButton();
                        setTimeout(() => {
                            randomButton();
                        }, 500);
                    }, 500);
                }, 500);
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            }
        }
    }
}

/* STATS FUNCTIONS */

// Carregar dados armazenados localmente
var account = JSON.parse(localStorage.getItem('accounts')) || {};
var confirm = JSON.parse(localStorage.getItem('confirmedPlayers')) || [];

function salvarDadosLocalmente() {
    // Salvar dados localmente
    localStorage.setItem('accounts', JSON.stringify(account));
    localStorage.setItem('confirmedPlayers', JSON.stringify(confirm));
}

function registrar(player, password) {
    var msgArray = password.split(/ +/);
    if (account[player.name]) {
        return room.sendAnnouncement("Voc√™ j√° est√° registrado.", player.id);
    }

    account[player.name] = msgArray[1];
    room.sendAnnouncement(`Sua senha √©: ${msgArray[1]}`, player.id);
    salvarDadosLocalmente();
}

function login(player, password) {
    var msgArray = password.split(/ +/);
    if (confirm.includes(player.id)) {
        room.sendAnnouncement("Voc√™ j√° confirmou.", player.id);
    } else if (!account[player.name]) {
        room.sendAnnouncement("Voc√™ n√£o est√° registrado.", player.id);
    } else if (account[player.name] !== msgArray[1]) {
        room.sendAnnouncement("Senha incorreta.", player.id);
    } else if (!confirm.includes(player.id)) {
        room.sendAnnouncement(`${player.name} confirmou!`, null);
        confirm.push(player.id);
        salvarDadosLocalmente();
    }
}

function mudarSenha(player, password){
    var msgArray = password.split(/ +/)
    if (confirm.includes(player.id)){
        account[player.name] = msgArray[1]
        room.sendAnnouncement(`Senha alterada com sucesso! Nova Senha: ${msgArray[1]}`, player.id);
    }
}

/* GK FUNCTIONS */

function handleGKTeam(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? teamRed : teamBlue;
    let playerGK = teamArray.reduce((prev, current) => {
        if (team == Team.RED) {
            return (prev?.position.x < current.position.x) ? prev : current
        } else {
            return (prev?.position.x > current.position.x) ? prev : current
        }
    }, null);
    let playerCompGK = getPlayerComp(playerGK);
    return playerCompGK;
}

function handleGK() {
    let redGK = handleGKTeam(Team.RED);
    if (redGK != null) {
        redGK.GKTicks++;
    }
    let blueGK = handleGKTeam(Team.BLUE);
    if (blueGK != null) {
        blueGK.GKTicks++;
    }
}

function getGK(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? game.playerComp[0] : game.playerComp[1];
    let playerGK = teamArray.reduce((prev, current) => {
        return (prev?.GKTicks > current.GKTicks) ? prev : current
    }, null);
    return playerGK;
}

function getCS(scores) {
    let playersNameCS = [];
    let redGK = getGK(Team.RED);
    let blueGK = getGK(Team.BLUE);
    if (redGK != null && scores.blue == 0) {
        playersNameCS.push(redGK.player.name);
    }
    if (blueGK != null && scores.red == 0) {
        playersNameCS.push(blueGK.player.name);
    }
    return playersNameCS;
}

function getCSString(scores) {
    let playersCS = getCS(scores);
    if (playersCS.length == 0) {
        return "ü•Ö +0 cs";
    } else if (playersCS.length == 1) {
        return `ü•Ö ${playersCS[0]} +1 cs.`;
    } else {
        return `ü•Ö ${playersCS[0]} e ${playersCS[1]} +1 CS.`;
    }
}

/* GLOBAL STATS FUNCTIONS */

function getLastTouchOfTheBall() {
    const ballPosition = room.getBallPosition();
    updateTeams();
    let playerArray = [];
    for (let player of players) {
        if (player.position != null) {
            var distanceToBall = pointDistance(player.position, ballPosition);
            if (distanceToBall < triggerDistance) {
                if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
                playerArray.push([player, distanceToBall]);
            }
        }
    }
    if (playerArray.length != 0) {
        let playerTouch = playerArray.sort((a, b) => a[1] - b[1])[0][0];
        if (lastTeamTouched == playerTouch.team || lastTeamTouched == Team.SPECTATORS) {
            if (lastTouches[0] == null || (lastTouches[0] != null && lastTouches[0].player.id != playerTouch.id)) {
                game.touchArray.push(
                    new BallTouch(
                        playerTouch,
                        game.scores.time,
                        getGoalGame(),
                        ballPosition
                    )
                );
                lastTouches[0] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 1,
                    getGoalGame()
                );
                lastTouches[1] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 2,
                    getGoalGame()
                );
            }
        }
        lastTeamTouched = playerTouch.team;
    }
}

function getBallSpeed() {
    var ballProp = room.getDiscProperties(0);
    return Math.sqrt(ballProp.xspeed ** 2 + ballProp.yspeed ** 2) * speedCoefficient;
}

function getGameStats() {
    if (playSituation == Situation.PLAY && gameState == State.PLAY) {
        lastTeamTouched == Team.RED ? possession[0]++ : possession[1]++;
        var ballPosition = room.getBallPosition();
        ballPosition.x < 0 ? actionZoneHalf[0]++ : actionZoneHalf[1]++;
        handleGK();
    }
}

/* GOAL ATTRIBUTION FUNCTIONS */

function getGoalAttribution(team) {
    var goalAttribution = Array(2).fill(null);
    if (lastTouches[0] != null) {
        if (lastTouches[0].player.team == team) {
            // Direct goal scored by player
            if (lastTouches[1] != null && lastTouches[1].player.team == team) {
                goalAttribution = [lastTouches[0].player, lastTouches[1].player];
            } else {
                goalAttribution = [lastTouches[0].player, null];
            }
        } else {
            // Own goal
            goalAttribution = [lastTouches[0].player, null];
        }
    }
    return goalAttribution;
}

function getGoalString(team) {
    var goalString;
    var scores = game.scores;
    goalAttribution = getGoalAttribution(team);
    if (goalAttribution[0] != null) {
        if (goalAttribution[0].team == team) {
            if (goalAttribution[1] != null && goalAttribution[1].team == team) {
                goalString = `‚öΩ ${getTimeGame(scores.time)} Gol de ${goalAttribution[0].name} ! Assistencia de ${goalAttribution[1].name}. Velocidade da bola: ${ballSpeed.toFixed(2)}km/h.`;
                game.goals.push(
                    new Goal(
                        scores.time,
                        team,
                        goalAttribution[0],
                        goalAttribution[1]
                    )
                );
            } else {
                goalString = `‚öΩ ${getTimeGame(scores.time)} Gol de ${goalAttribution[0].name} ! Velocidade da bola: ${ballSpeed.toFixed(2)}km/h.`;
                game.goals.push(
                    new Goal(scores.time, team, goalAttribution[0], null)
                );
            }
        } else {
            goalString = `üòÇ ${getTimeGame(scores.time)} Gol contra por ${goalAttribution[0].name} ! Velocidade da bola: ${ballSpeed.toFixed(2)}km/h.`;
            game.goals.push(
                new Goal(scores.time, team, goalAttribution[0], null)
            );
        }
    } else {
        goalString = `‚öΩ ${getTimeGame(scores.time)} Gol para o time ${team == Team.RED ? 'Vermelho' : 'Azul'} team ! Velocidade da bola: ${ballSpeed.toFixed(2)}km/h.`;
        game.goals.push(
            new Goal(scores.time, team, null, null)
        );
    }

    return goalString;
}

/* ROOM STATS FUNCTIONS */

function updatePlayerStats(player, teamStats) {
    var stats = new HaxStatistics(player.name);
    var pComp = getPlayerComp(player);
    if (localStorage.getItem(authArray[player.id])) {
        stats = JSON.parse(localStorage.getItem(authArray[player.id]));
    }
    stats.games++;
    if (lastWinner == teamStats) stats.wins++
    if(lastWinner == 0) stats.empates++
    stats.winrate = ((100 * stats.wins) / (stats.games || 1)).toFixed(1) + `%`;
    stats.goals += getGoalsPlayer(pComp);
    stats.assists += getAssistsPlayer(pComp);
    stats.ownGoals += getOwnGoalsPlayer(pComp);
    stats.CS += getCSPlayer(pComp);
    stats.pontos = (3*stats.wins)-(stats.games-stats.wins)+stats.goals+stats.assists+stats.CS+stats.empates
    if(tipoVip == 3){
        stats.pontos += (stats.pontos/100)*15
    }else if(tipoVip == 4){
        stats.pontos += (stats.pontos/100)*30
    }
    localStorage.setItem(authArray[player.id], JSON.stringify(stats));
}

function updateStats() {
    if (
        players.length >= 2 * teamSize &&
        (
            game.scores.time >= (5 / 6) * game.scores.timeLimit ||
            game.scores.red == game.scores.scoreLimit ||
            game.scores.blue == game.scores.scoreLimit
        ) &&
        teamRedStats.length >= teamSize && teamBlueStats.length >= teamSize
    ) {
        for (let player of teamRedStats) {
            updatePlayerStats(player, Team.RED);
        }
        for (let player of teamBlueStats) {
            updatePlayerStats(player, Team.BLUE);
        }
    }
}

function printRankings(statKey, id = 0) {
    var leaderboard = [];
    statKey = statKey == "cs" ? "CS" : statKey;
    for (var i = 0; i < localStorage.length; i++) {
        var key = localStorage.key(i);
        if (key.length == 43)
            leaderboard.push([
                JSON.parse(localStorage.getItem(key)).playerName,
                JSON.parse(localStorage.getItem(key))[statKey],
            ]);
    }
    if (leaderboard.length < 5) {
        if (id != 0) {
            room.sendAnnouncement(
                'Ainda n√£o h√° jogos suficientes!',
                id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
        return;
    }
    leaderboard.sort(function (a, b) { return b[1] - a[1]; });
    statKey = statNameTranslation[statKey] ?statNameTranslation[statKey] : statKey
    var rankingString = `${statKey.charAt(0).toUpperCase() + statKey.slice(1)}> `;
    for (let i = 0; i < 5; i++) {
        let playerName = leaderboard[i][0];
        let playerStat = leaderboard[i][1];
        rankingString += `#${i + 1} ${playerName} : ${playerStat}, `;
    }
    rankingString = rankingString.substring(0, rankingString.length - 2);
    room.sendAnnouncement(
        rankingString,
        id,
        infoColor,
        'bold',
        HaxNotification.CHAT
    );
}

/* GET STATS FUNCTIONS */

function getGamePlayerStats(player) {
    var stats = new HaxStatistics(player.name);
    var pComp = getPlayerComp(player);
    stats.goals += getGoalsPlayer(pComp);
    stats.assists += getAssistsPlayer(pComp);
    stats.ownGoals += getOwnGoalsPlayer(pComp);
    stats.CS += getCSPlayer(pComp);
    return stats;
}

function getGametimePlayer(pComp) {
    if (pComp == null) return 0;//
    var timePlayer = 0;
    for (let j = 0; j < pComp.timeEntry.length; j++) {
        if (pComp.timeExit.length < j + 1) {
            timePlayer += game.scores.time - pComp.timeEntry[j];
        } else {
            timePlayer += pComp.timeExit[j] - pComp.timeEntry[j];
        }
    }
    return Math.floor(timePlayer);
}

function getGoalsPlayer(pComp) {
    if (pComp == null) return 0;
    var goalPlayer = 0;
    for (let goal of game.goals) {
        if (goal.striker != null && goal.team === pComp.player.team) {
            if (authArray[goal.striker.id] == pComp.auth) {
                goalPlayer++;
            }
        }
    }
    return goalPlayer;
}

function getOwnGoalsPlayer(pComp) {
    if (pComp == null) return 0;//
    var goalPlayer = 0;
    for (let goal of game.goals) {
        if (goal.striker != null && goal.team !== pComp.player.team) {
            if (authArray[goal.striker.id] == pComp.auth) {
                goalPlayer++;
            }
        }
    }
    return goalPlayer;
}

function getAssistsPlayer(pComp) {
    if (pComp == null) return 0;//
    var assistPlayer = 0;
    for (let goal of game.goals) {
        if (goal.assist != null) {
            if (authArray[goal.assist.id] == pComp.auth) {
                assistPlayer++;
            }
        }
    }
    return assistPlayer;
}

function getGKPlayer(pComp) {
    if (pComp == null) return 0;//
    let GKRed = getGK(Team.RED);
    if (pComp.auth == GKRed?.auth) {
        return Team.RED;
    }
    let GKBlue = getGK(Team.BLUE);
    if (pComp.auth == GKBlue?.auth) {
        return Team.BLUE;
    }
    return Team.SPECTATORS;
}

function getCSPlayer(pComp) {
    if (pComp == null) return 0;//
    if (getGKPlayer(pComp) == Team.RED && game.scores.blue == 0) {
        return 1;
    } else if (getGKPlayer(pComp) == Team.BLUE && game.scores.red == 0) {
        return 1;
    }
    return 0;
}

function actionReportCountTeam(goals, team) {
    let playerActionSummaryTeam = [];
    let indexTeam = team == Team.RED ? 0 : 1;
    let indexOtherTeam = team == Team.RED ? 1 : 0;
    for (let goal of goals[indexTeam]) {
        if (goal[0] != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == goal[0].id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[0].id);
                playerActionSummaryTeam[index][1]++;
            } else {
                playerActionSummaryTeam.push([goal[0], 1, 0, 0]);
            }
            if (goal[1] != null) {
                if (playerActionSummaryTeam.find(a => a[0].id == goal[1].id)) {
                    let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[1].id);
                    playerActionSummaryTeam[index][2]++;
                } else {
                    playerActionSummaryTeam.push([goal[1], 0, 1, 0]);
                }
            }
        }
    }
    if (goals[indexOtherTeam].length == 0) {
        let playerCS = getGK(team)?.player;
        if (playerCS != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == playerCS.id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == playerCS.id);
                playerActionSummaryTeam[index][3]++;
            } else {
                playerActionSummaryTeam.push([playerCS, 0, 0, 1]);
            }
        }
    }

    playerActionSummaryTeam.sort((a, b) => (a[1] + a[2] + a[3]) - (b[1] + b[2] + b[3]));
    return playerActionSummaryTeam;
}

/* PRINT FUNCTIONS */

function printPlayerStats(stats) {
    let statsString = '[üìÑ] Stats de ';
    for (let [key, value] of Object.entries(stats)) {
        if (key == 'playerName') statsString += `${value}: `;
        else if(key != 'pontos'){
            let statName = statNameTranslation[key] ? statNameTranslation[key] : key;
            let reCamelCase = /([A-Z](?=[a-z]+)|[A-Z]+(?![a-z]))/g;
            statName = statName.replace(reCamelCase, ' $1').trim();
            statsString += `${statName.charAt(0).toUpperCase() + statName.slice(1)}: ${value}, `;
        }
    }
    statsString = statsString.substring(0, statsString.length - 2);
    return statsString;
}

function printPlayerStatsMe(stats) {
    let statsString = '[üìÑ] Seus stats ';
    for (let [key, value] of Object.entries(stats)) {
        if (key == 'playerName') statsString += `${value}: `;
        else if(key != 'pontos'){
            let statName = statNameTranslation[key] ? statNameTranslation[key] : key;
            let reCamelCase = /([A-Z](?=[a-z]+)|[A-Z]+(?![a-z]))/g;
            statName = statName.replace(reCamelCase, ' $1').trim();
            statsString += `${statName.charAt(0).toUpperCase() + statName.slice(1)}: ${value}, `;
        }
    }
    statsString = statsString.substring(0, statsString.length - 2);
    return statsString;
}

/* FETCH FUNCTIONS */

function fetchGametimeReport(game) {
    var fieldGametimeRed = {
        name: 'üî¥        **STATUS TIME VERMELHO**',
        value: '‚åõ __**Tempo do Jogo:**__\n\n',
        inline: true,
    };
    var fieldGametimeBlue = {
        name: 'üîµ       **STATUS TIME AZUL**',
        value: '‚åõ __**Tempo do Jogo:**__\n\n',
        inline: true,
    };
    var redTeamTimes = game.playerComp[0].map((p) => [p.player, getGametimePlayer(p)]);
    var blueTeamTimes = game.playerComp[1].map((p) => [p.player, getGametimePlayer(p)]);

    for (let time of redTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeRed.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeRed.value += `\n${blueTeamTimes.length - redTeamTimes.length > 0 ? '\n'.repeat(blueTeamTimes.length - redTeamTimes.length) : ''
        }`;
    fieldGametimeRed.value += '=====================';

    for (let time of blueTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeBlue.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeBlue.value += `\n${redTeamTimes.length - blueTeamTimes.length > 0 ? '\n'.repeat(redTeamTimes.length - blueTeamTimes.length) : ''
        }`;
    fieldGametimeBlue.value += '=====================';

    return [fieldGametimeRed, fieldGametimeBlue];
}

function fetchActionsSummaryReport(game) {
    var fieldReportRed = {
        name: 'üî¥        **STATUS TIME VERMELHO**',
        value: 'üìä __**Status Jogador:**__\n\n',
        inline: true,
    };
    var fieldReportBlue = {
        name: 'üîµ       **STATUS TIME VERMELHO**',
        value: 'üìä __**Status Jogador:**__\n\n',
        inline: true,
    };
    var goals = [[], []];
    for (let i = 0; i < game.goals.length; i++) {
        goals[game.goals[i].team - 1].push([game.goals[i].striker, game.goals[i].assist]);
    }
    var redActions = actionReportCountTeam(goals, Team.RED);
    if (redActions.length > 0) {
        for (let act of redActions) {
            fieldReportRed.value += `> **${act[0].team != Team.RED ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }
    var blueActions = actionReportCountTeam(goals, Team.BLUE);
    if (blueActions.length > 0) {
        for (let act of blueActions) {
            fieldReportBlue.value += `> **${act[0].team != Team.BLUE ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }

    fieldReportRed.value += `\n${blueActions.length - redActions.length > 0 ? '\n'.repeat(blueActions.length - redActions.length) : ''
        }`;
    fieldReportRed.value += '=====================';

    fieldReportBlue.value += `\n${redActions.length - blueActions.length > 0 ? '\n'.repeat(redActions.length - blueActions.length) : ''
        }`;
    fieldReportBlue.value += '=====================';

    return [fieldReportRed, fieldReportBlue];
}

/* EVENTS */

/* PLAYER MOVEMENT */

room.onPlayerJoin = function (player) { 
    if (isBlacklisted(player) == true) {
        room.kickPlayer(player.id, "Voc√™ est√° banido!", true);
        return;
    }

    if (room.getPlayerList().length <= 7) {
        defaultSlowMode = 1.5;
    } else if (room.getPlayerList().length < 15) {
        defaultSlowMode = (0.2 * room.getPlayerList().length).toFixed(1);
    } else {
        defaultSlowMode = 3.0;
    }

    authArray[player.id] = player.auth;

    connautologin = player.conn;
    authautologin = player.auth;
    var conn = player.conn;
    var ipv4 = conn.match(/.{1,2}/g).map(function (v) {
        return String.fromCharCode(parseInt(v, 16));
    }).join('');

    logsentradas(
        "```" + "üìùInforma√ß√µes do jogador, conn, auth, IP e data ‚è∞" + "\n" +
        "ü™¨" + `${roomName}` + "ü™¨" + "\n" +
        "‚ú® Nick: " + player.name + "\n" +
        "üåê Conn: " + player.conn + "\n" +
        "üíª Auth: " + player.auth + "\n" +
        "üåè Ipv4 " + (ipv4) + "\n" +
        "‚è∞ Data: " + `${getDateInfo()}` + "```");

    room.sendAnnouncement("üëã ùóïùó≤ùó∫ ùó©ùó∂ùóªùó±ùóº! " + player.name + " a üçÅ Pro-League Arenas üçÅ ", player.id, 0xA52A2A,"bold");
    room.sendAnnouncement("Digite !ajuda para ver os comandos dispon√≠vels", player.id,0xA52A2A,"bold");
    room.sendAnnouncement("üçÅ Sempre estamos atualizando pra focar ligado em tudo entre no nosso Discord !!!", player.id, 0xA52A2A,"bold");
        HaxNotification.CHAT
  
    updateTeams();
    updateAdmins();
    if (dono.findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(`O Dono ${player.name} conectou-se √† sala!`,
            null, announcementColor, 'bold', HaxNotification.CHAT)
        room.setPlayerAdmin(player.id, true);
    } else if (mods.findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(`O Moderador ${player.name} conectou-se √† sala!`,
            null, announcementColor, 'bold', HaxNotification.CHAT)
        room.setPlayerAdmin(player.id, true);
    } else if (gerente.findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(`O Gerente ${player.name} conectou-se √† sala!`,
            null, announcementColor, 'bold', HaxNotification.CHAT)
        room.setPlayerAdmin(player.id, true);
    } 
    else if(vips[player.auth]){
        if(vips[player.auth].msgEntrada != ''){
            room.sendAnnouncement(`${vips[player.auth].msgEntrada}`,
                null, announcementColor, 'bold', HaxNotification.CHAT)
        }
    }
    var sameAuthCheck = playersAll.filter((p) => p.id != player.id && authArray[p.id] == player.auth);
    if (sameAuthCheck.length > 0 && !debugMode) {
        var oldPlayerArray = playersAll.filter((p) => p.id != player.id && authArray[p.id] == player.auth);
        for (let oldPlayer of oldPlayerArray) {
            ghostKickHandle(oldPlayer, player);
        }
    }

    handlePlayersJoin()

    if (account[player.name]){
        room.sendAnnouncement(`Existe uma conta com este nick! Fa√ßa login em 30 segundos ou ser√° kikado.\n!login <senha> \nSe essa conta n√£o for sua, mude seu nick e volte.`, player.id);
        let tempoI = 0
        let interval1 = setInterval(() => {
        tempoI++
        if(confirm.includes(player.id)){
            clearInterval(interval1)
        }else{
            room.sendAnnouncement(`Existe uma conta com este nick! Fa√ßa login em 30 segundos ou ser√° kikado.\n!login <senha> \nSe essa conta n√£o for sua, mude seu nick e volte.`, player.id);
        }
        if(tempoI == 6){
            room.kickPlayer(player.id, "Fa√ßa login na sua conta.", false)
            clearInterval(interval1)
        } 
        }, 5 * 1000)
    }else{
        room.sendAnnouncement("Se registre com o comando: !registrar <senha>", player.id)
    }
}

room.onPlayerTeamChange = function (changedPlayer, byPlayer) {
    handleLineupChangeTeamChange(changedPlayer);
    if (AFKSet.has(changedPlayer.id) && changedPlayer.team != Team.SPECTATORS) {
        room.setPlayerTeam(changedPlayer.id, Team.SPECTATORS);
        room.sendAnnouncement(
            `${changedPlayer.name} est√° AFK!`,
            null,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        return;
    }
    updateTeams();
    if (gameState != State.STOP) {
        if (changedPlayer.team != Team.SPECTATORS && game.scores.time <= (3 / 4) * game.scores.timeLimit && Math.abs(game.scores.blue - game.scores.red) < 2) {
            changedPlayer.team == Team.RED ? teamRedStats.push(changedPlayer) : teamBlueStats.push(changedPlayer);
        }
    }
    handleActivityPlayerTeamChange(changedPlayer);
    handlePlayersTeamChange(byPlayer);
};

room.onPlayerLeave = function (player) {
    if (tirouTagRank.includes(player.id)) {
        tirouTagRank.splice(tirouTagRank.indexOf(player.id), 1);
    }
    if (tirouTagVip.includes(player.id)) {
        tirouTagVip.splice(tirouTagVip.indexOf(player.id), 1);
    }
    if (confirm.includes(player.id)) {
        confirm.splice(confirm.indexOf(player.id), 1);
    }

    // Remo√ß√£o da autentica√ß√£o do jogador ap√≥s 5 segundos
    setTimeout(() => {
        delete authArray[player.id];
    }, 5 * 1000);

    // Atualiza√ß√£o das equipes e manipula√ß√£o de eventos de sa√≠da
    handleLineupChangeLeave(player);
    checkCaptainLeave(player);
    updateTeams();
    updateAdmins();
    handlePlayersLeave();
};

room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) {
    kickFetchVariable = true;
    if ((ban && ((byPlayer != null &&
        (byPlayer.id == kickedPlayer.id || getRole(byPlayer) < Role.ADMIN_PERM)) || getRole(kickedPlayer) == Role.MASTER)) || disableBans
    ) {
        room.clearBan(kickedPlayer.id);
        return;
    }
    if (byPlayer != null && getRole(byPlayer) < Role.ADMIN_PERM) {
        room.sendAnnouncement(
            'Voc√™ n√£o tem permiss√£o para expulsar/banir jogadores!',
            byPlayer.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(byPlayer.id, false);
        return;
    }
    if (ban) banList.push([kickedPlayer.name, kickedPlayer.id]);
};

/* PLAYER ACTIVITY */

room.onPlayerChat = function (player, message) {
    var comando = message[0];
    enviaChatParaDiscord(`${player.name}: ${message}`);
    if (message.substr(0, prefixTeamChatString.length) == prefixTeamChatString) {
        room.getPlayerList()
        .filter(callback => callback.team == player.team)
        .forEach(callback => {
            room.sendAnnouncement(`[CHAT TEAM]${player.name}: ${message.substr(prefixTeamChatString.length)}`, callback.id, player.team == 1 ? 0xff7b73 : player.team == 0 ? 0xe4ffb6 : 0x38b5ff);
        });
        return false;
    }
    stats = localStorage.getItem(authArray[player.id])?JSON.parse(localStorage.getItem(authArray[player.id])):false
    var rankTag = vipTag = "", corChat = "", pausarJogoOFF = false, furarFila = false, msgArray = message.split(/ +/), fonte = ""
    tipoVip = 0
    if (gameState !== State.STOP && player.team != Team.SPECTATORS) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
    
    if (message.match(regex)) {
    room.sendAnnouncement("Cuidado com as suas palavras!.", player.id, 0xFFFF00);
    return false;
    }

    if (chooseMode && teamRed.length * teamBlue.length != 0) {
        var choosingMessageCheck = chooseModeFunction(player, message);
        if (choosingMessageCheck) return false;
    }

    if(vips[authArray[player.id]]){
        tipoVip = vips[authArray[player.id]].tipoVip
        corChat = vips[authArray[player.id]].corChat
        pausarJogoOFF = vips[authArray[player.id]].pausarJogoOFF
        furarFila = vips[authArray[player.id]].furarFila
        if(vips[authArray[player.id]].fonte != 0){
            //"normal","bold","italic", "small", "small-bold", "small-italic"
            //"normal","negrito","it√°lico", "pequeno", "pequeno negrito", "pequeno it√°lico"
            if(vips[authArray[player.id]].fonte == 1){
                fonte = "normal"
            }else if(vips[authArray[player.id]].fonte == 2){
                fonte = "bold"
            }else if(vips[authArray[player.id]].fonte == 3){
                fonte = "italic"
            }else if(vips[authArray[player.id]].fonte == 4){
                fonte = "small"
            }else if(vips[authArray[player.id]].fonte == 5){
                fonte = "small-bold"
            }else if(vips[authArray[player.id]].fonte == 6){
                fonte = "small-italic"
            }
        }
    }

    if (slowMode > 0) {
        var filter = slowModeFunction(player, message);
        if (filter){
            if(tipoVip >= 2){
                room.sendAnnouncement(`Tu est√° digitando r√°pido demais. Aguarde... 1.5s.`,
                    player.id, infoColor, 'bold', HaxNotification.CHAT)
                return false
            }
            room.sendAnnouncement(`Tu est√° digitando r√°pido demais. Aguarde... ${defaultSlowMode}s.`,
                player.id, infoColor, 'bold', HaxNotification.CHAT)
            return false
        }
    }

    if(tipoVip >= 2 && message.substring(0,8)== '!tagrank'){
        if(tirouTagRank.includes(player.id)){
            tirouTagRank.splice(tirouTagRank.indexOf(player.id),1)
            room.sendAnnouncement(`Voc√™ habilitou a tag de Rank!`,
            null, infoColor, 'bold', HaxNotification.CHAT)
            return false
        }
        tirouTagRank.push(player.id)
        room.sendAnnouncement(`Voc√™ escondeu a tag de Rank!`,
            null, infoColor, 'bold', HaxNotification.CHAT)
        return false

    }

    if(tipoVip >= 2 && message.substring(0,7)== '!tagvip'){
        if(tirouTagVip.includes(player.id)){
            tirouTagVip.splice(tirouTagVip.indexOf(player.id),1)
            room.sendAnnouncement(`Voc√™ habilitou a sua tag de Vip!`,
            null, infoColor, 'bold', HaxNotification.CHAT)
            return false
        }
        tirouTagVip.push(player.id)
        room.sendAnnouncement(`Voc√™ escondeu a sua tag de Vip!`,
            null, infoColor, 'bold', HaxNotification.CHAT)
        return false

    }
    if(tipoVip >= 2 && msgArray[0] == '!meunis'){      
        if(vips[authArray[player.id]].unis){
            room.sendAnnouncement(`Seus unis:`,
                player.id, defaultColor, 'bold', HaxNotification.CHAT)
            for(let i in vips[authArray[player.id]].unis){
                room.sendAnnouncement(`${vips[authArray[player.id]].unis[i]}\n`,
                    player.id, defaultColor, 'bold', HaxNotification.CHAT)
            }
        }
        return false
    }
    if(tipoVip >= 2 && msgArray[0] == '!meprovos'){      
        if(vips[authArray[player.id]].provos){
            room.sendAnnouncement(`Suas provos:
                !pro1`,
                player.id, defaultColor, 'bold', HaxNotification.CHAT)
            for(let i in vips[authArray[player.id]].provos){
                room.sendAnnouncement(`${vips[authArray[player.id]].provos[i]}\n`,
                    player.id, defaultColor, 'bold', HaxNotification.CHAT)
            }
        }
        return false
    }     
    if(player.admin && msgArray[0] == '!sorteio'){      
        room.sendAnnouncement(`O admin ${player.name} iniciou o sorteio!\nO Ganhandor foi... ${room.getPlayerList()[Math.floor(Math.random() * room.getPlayerList().length)].name}\nParab√©ns seu pr√™mio ser√° entregue pelo adm, aguarde....`,
            null, infoColor, 'bold', HaxNotification.CHAT)
        return false
    }
    if(player.team == 1){
        if(teamRed[0].id == player.id){
            updateTeams()
            capit√£o = player.id
        }
    }
    if(player.team == 2){
        if(teamBlue[0].id == player.id){
            updateTeams()
            capit√£o = player.id
        }
    }

    if (tipoVip != 0) {
        if (tipoVip == 1) {
            vipTag = ` [${vipNames[1]}] `
        } else if (tipoVip == 2) {
            vipTag = ` [${vipNames[2]}] `
        } else if (tipoVip == 3) {
            vipTag = ` [${vipNames[3]}] `
        } else if (tipoVip == 4) {
            vipTag = ` [${vipNames[4]}] `
        }
    }

    if(modoVoteBan && message == '!s'){
        if(votouBan.includes(player.id)){
            room.sendAnnouncement(`Tu j√° votou!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        votosBan++
        votouBan.push(player.id)
        room.sendAnnouncement(`${player.id} votou!`,
                null, announcementColor, 'bold', HaxNotification.CHAT)
        return false
    }
    if(modoVoteMute && message == '!s'){
        if(votouMute.includes(player.id)){
            room.sendAnnouncement(`Tu j√° votou!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        votosMute++
        votouMute.push(player.id)
        room.sendAnnouncement(`${player.id} votou!`,
                null, announcementColor, 'bold', HaxNotification.CHAT)
        return false
    }

    if(msgArray[0].substring(0,7).toLowerCase() == '!avatar' && tipoVip > 1){
        if(!msgArray[1]){
            room.sendAnnouncement(`Tu precisa informar qual avatar vai ser alterado! Exemplo:\n!avatar <1> <avatar> (para quando faz gol) ou !avatar <2> <avatar> (para quando toma gol)`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
        if(msgArray[1] >= 1 && msgArray[1] <= 2){
            if(!msgArray[2]){
                room.sendAnnouncement(`Tu precisa informar o texto ou emoji do avatar! Exemplo:\n!avatar 1 üôÇ`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
            }
            vips[authArray[player.id]].avatarGol[msgArray[1]-1] = msgArray[2]
            room.sendAnnouncement(`Avatar ${msgArray[1]} modificado com sucesso!`,
                player.id, defaultColor, 'bold', HaxNotification.CHAT)
            return false
        }else{
            room.sendAnnouncement(`Tu s√≥ pode modificar o avatar 1 (para quando faz gol) ou 2 (para quando toma gol)!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
    }

    if(capit√£o == player.id){
    if(uniList[msgArray[0].toLowerCase()] != undefined){
        room.setTeamColors(player.team, ...uniList[msgArray[0].toLowerCase()])
        return false
    }}

    if(capit√£o == player.id && tipoVip > 0){
    if(uniVIP[msgArray[0].toLowerCase()] != undefined){
        room.setTeamColors(player.team, ...uniVIP[msgArray[0].toLowerCase()])
        return false
    }}    

    if(msgArray[0].substring(0,7).toLowerCase() == '!setuni' && tipoVip > 1){
        if(msgArray[1] >= 1 && msgArray[1] <= 1){
            if(msgArray[4]){
                    let regEx1 = new RegExp(`^[0-9]{1,3}$`)
                    let regEx2 = new RegExp(`^[0-9a-fA-F]{6}$`)
                    let xuxa1 = true
                    let xuxa2 = true
                    if(msgArray[5]){
                        xuxa1 = regEx2.test(msgArray[5])
                    }
                    if(msgArray[6]){
                        xuxa2 = regEx2.test(msgArray[6])
                    }
                    if(regEx1.test(msgArray[2]) && regEx2.test(msgArray[3]) && regEx2.test(msgArray[4]) && xuxa1 && xuxa2){
                                if(msgArray[6]){
                                    vips[authArray[player.id]].unis['!uni'+msgArray[1]] = [msgArray[2],'0x'+msgArray[3],['0x'+msgArray[4],'0x'+msgArray[5], '0x'                                              +msgArray[6]]]
                                }else if(msgArray[5]){
                                    vips[authArray[player.id]].unis['!uni'+msgArray[1]] = [msgArray[2],'0x'+msgArray[3],['0x'+msgArray[4],'0x'+msgArray[5]]]
                                }else{
                                vips[authArray[player.id]].unis['!uni'+msgArray[1]] = [msgArray[2],'0x'+msgArray[3],['0x'+msgArray[4]]]
                            }
                            room.sendAnnouncement(`Uniforme criado/modificado com sucesso! Use o comando !uni${msgArray[1]} para usar!`,
                                player.id, defaultColor, 'bold', HaxNotification.CHAT)
                            return false
                    }else{
                        room.sendAnnouncement(`C√≥digo de uniforme inv√°lido!`,
                            player.id, errorColor, 'bold', HaxNotification.CHAT)
                        return false
                    }
            }else{
                room.sendAnnouncement(`N√∫mero de argumentos minimos para o comando inv√°lido!`,
                    player.id, errorColor, 'bold', HaxNotification.CHAT)
                return false
            }
        }else{
            room.sendAnnouncement(`Voc√™ s√≥ pode criar at√© 5 uniformes vips ( Utilize como exemplo !setuni 1 60 FFFFFF 0080FF 004077 002033`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
    }
 
    if(capit√£o == player.id && tipoVip > 1 && msgArray[0].substring(0,4).toLowerCase() == '!uni'){
                if(vips[authArray[player.id]].unis[msgArray[0].toLowerCase()]){
                    room.setTeamColors(player.team, ...vips[authArray[player.id]].unis[msgArray[0].toLowerCase()])
                    room.sendAnnouncement(`O VIP ${player.name} colocou seu uniforme exclusivo!`,
                        null, defaultColor, 'bold', HaxNotification.CHAT)
                }
                return false
    }

    if (!player.admin && muteArray.getByAuth(authArray[player.id]) != null) {
        room.sendAnnouncement(
            `Tu est√° mutado! Aguarde o tempo de muta√ß√£o.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        return false;
    }
    if (msgArray[0].toLowerCase() == 't') {
        teamChat(player, message);
        return false;
    }

    if(vipTag != ""){
        switch(msgArray[0].toLowerCase()){
        case '!p':
            if(player.team != 0){
            if(gameState == State.PLAY){
            if(!pausarJogoOFF){
                vips[authArray[player.id]].pausarJogoOFF = true
                room.pauseGame(true)
                setTimeout(() => {
                    room.pauseGame(false);
                }, 15000);
                let salvarAuth = authArray[player.id]
                setTimeout(() => {
                    vips[salvarAuth].pausarJogoOFF = false
                }, tipoVip==1?10 * 60* 1000:5 * 60 * 1000)
                if(tipoVip == 4){
                    room.sendAnnouncement(
                `Jogo pausado 30 segundos pelo VIP: ${player.name}`,
                null,
                defaultColor,
                'bold',
                HaxNotification.CHAT);
                return false
                }
                room.sendAnnouncement(
                `Jogo pausado 15 segundos pelo VIP: ${player.name}`,
                null,
                defaultColor,
                'bold',
                HaxNotification.CHAT);
                return false
            }else{
                if(tipoVip == 1){
                room.sendAnnouncement(
                `Tu s√≥ pode usar o comando pause a cada 10 minutos. Aguarde...`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT);
                return false
                }else{
                room.sendAnnouncement(
                `Tu s√≥ pode usar o comando pause a cada 5 minutos. Aguarde...`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT);
                return false
                }
            }
            }else if(gameState == State.STOP){
                room.sendAnnouncement(
                `Tu s√≥ pode pausar enquanto o jogo est√° em andamento.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT);
                return false
            }else{
                room.sendAnnouncement(
                `O jogo j√° est√° pausado.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT);
                return false
            }
            }else{
                room.sendAnnouncement(
                `Tu precisa estar jogando para pausar o jogo`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT);
                return false
            }
        case '!corchat':
            let regEx0 = new RegExp(`^[0-9a-fA-F]{6}$`)
            if(regEx0.test(msgArray[1])){
                vips[authArray[player.id]].corChat = msgArray[1]
            room.sendAnnouncement(`A cor do seu chat foi alterada para: ${msgArray[1]}`,
                player.id, 0xffffff, 'bold', HaxNotification.CHAT);
            }else{
                room.sendAnnouncement(`C√≥digo/Formato de cor inv√°lido! Formato correto: FFFFFF`,
                player.id, 0xffffff, 'bold', HaxNotification.CHAT);
            }
            return false
        case '!furar':
            if(tipoVip >= 2){
                if(player.team == 0){
                    if(gameState == State.PLAY){
                    if(furarFila){
                        vips[authArray[player.id]].furarFila = false
                    room.pauseGame(true)
                    setTimeout(() => {
                        room.pauseGame(false)
                    }, 10)
                    let pulados = playersAll.filter((p) => p.team == 0)
                    setTimeout(() => {
                        for (var i = 0; i < pulados.length -1; i++) {
                            if(player.id != pulados[i].id){
                                room.setPlayerTeam(pulados[i].id, Team.RED)
                                room.setPlayerTeam(pulados[i].id, Team.SPECTATORS)
                            }
                        }
                        room.sendAnnouncement(`O jogador VIP ${player.name} furou a fila!`,
                        null, 0xffffff, 'bold', HaxNotification.CHAT);
                    }, 100)
                    let x = tipoVip == 2? 30 : tipoVip == 3? 15 : 10
                    let salvarAuth = authArray[player.id]
                    setTimeout(() => {
                        vips[salvarAuth].furarFila = true
                }, x * 60 * 1000)
                    return false
                    }else{
                        let msgErro = tipoVip == 2? '30' : tipoVip == 3? '15' : '10'
                        room.sendAnnouncement(`Tu s√≥ pode pular a fila a cada ${msgErro} minutos!`,
                            player.id, errorColor, 'bold', HaxNotification.CHAT);
                        return false
                    }
                    }else{
                        room.sendAnnouncement(`Tu s√≥ pode pular a fila com o jogo em andamento!`,
                            player.id, errorColor, 'bold', HaxNotification.CHAT);
                        return false
                    }
                }else{
                    room.sendAnnouncement(
                        `Tu precisa estar na fila de Spectador para usar este comando!`,
                        player.id, errorColor, 'bold', HaxNotification.CHAT);
                    return false
                }
            }else{
                room.sendAnnouncement(
                `Apenas VIP GOD pode furar a fila!`,
                player.id, errorColor, 'bold', HaxNotification.CHAT);
                return false
            }
        }
    }

    if(msgArray[0].substring(0,9).toLowerCase() == '!entrada' && tipoVip > 1){
        if(msgArray[1]){
            vips[authArray[player.id]].msgEntrada = message.substring(9)
                room.sendAnnouncement(`Mensagem de entrada criada/alterada com sucesso!`, player.id, defaultColor, 'bold', HaxNotification.CHAT)
            return false
        }else{
            room.sendAnnouncement('Menssagem vazia! Informe neste formato de exemplo: !entrada texto', player.id, errorColor, 'bold', HaxNotification.CHAT)
                return false
        }
    }

    if(msgArray[0].substring(0,9).toLowerCase() == '!fonte' && tipoVip >= 1){
        if(msgArray[1] && msgArray[1] >= 1 && msgArray[1] <= 6){
            vips[authArray[player.id]].fonte = msgArray[1]
                room.sendAnnouncement(`Fonte alterada com sucesso!`, player.id, defaultColor, 'bold', HaxNotification.CHAT)
            return false
        }else{
            room.sendAnnouncement('Tipo de fonte inv√°lida! Informe neste formato de exemplo: !fonte 2\n !fonte 1 para: normal\n !fonte 2 para: negrito\n !fonte 3 para: it√°lica\n !fonte 4 para: pequena\n !fonte 5 para: pequena-negrito\n !fonte 6 para: pequena-it√°lica', player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
        }
    }
    
    if(msgArray[0].substring(0,7).toLowerCase() == '!setpro' && tipoVip > 1){
        if(tipoVip == 2){
            if(msgArray[1] != 1){
                room.sendAnnouncement(`N√∫mero da provoca√ß√£o inv√°lido! Tu s√≥ pode criar 1 provoca√ß√£o, exemplo: !setpro 1 texto`, player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
            }
        }else if(tipoVip == 3){
            if(msgArray[1] < 1 || msgArray[1] > 2){
                room.sendAnnouncement(`N√∫mero da provoca√ß√£o inv√°lido! Tu s√≥ pode criar 2 provoca√ß√µes, exemplo: !setpro 2 texto`, player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
            }
        }else if(tipoVip == 4){
            if(msgArray[1] < 1 || msgArray[1] > 5){
                room.sendAnnouncement(`N√∫mero da provoca√ß√£o inv√°lido! Tu s√≥ pode criar 5 provoca√ß√µes, exemplo: !setpro 5 texto`, player.id, errorColor, 'bold', HaxNotification.CHAT)
            return false
            }
        }
            if(msgArray[2]){
                vips[authArray[player.id]].provos['!pro'+msgArray[1]] = player.name + ': ' + message.substring(9)
                room.sendAnnouncement(`Provoca√ß√£o ${msgArray[1]} criada com sucesso! Comando para usar: !pro${msgArray[1]}`,                                  player.id, defaultColor, 'bold', HaxNotification.CHAT)
            return false
            }else{
                room.sendAnnouncement('Menssagem vazia!', player.id, errorColor, 'bold', HaxNotification.CHAT)
                return false
            }
            return false
    }

    if(provos[msgArray[0].toLowerCase()]){
            if(player.team != 0){
                    room.sendAnnouncement(`${player.name}: ` + provos[msgArray[0].toLowerCase()], null, player.team == 1?'0xFF8080':player.team == 2?'0x8080FF':defaultColor, 'bold', HaxNotification.CHAT)
                    return false
            }else{
                room.sendAnnouncement(`Tu s√≥ pode provocar quando estiver em um time!`,
                    player.id, errorColor, 'bold', HaxNotification.CHAT)
                return false;
            }  
        }

    if(msgArray[0].substring(0,4).toLowerCase() == '!pro' && tipoVip > 1){
    if(player.team != 0){
            if(vips[authArray[player.id]].provos[msgArray[0].toLowerCase()]){
                room.sendAnnouncement(vips[authArray[player.id]].provos[msgArray[0].toLowerCase()], null, player.team == 1?'0xFF8080':player.team == 2?'0x8080FF':defaultColor, 'bold', HaxNotification.CHAT)
            return false
            }
    }else{
        room.sendAnnouncement(`Tu s√≥ pode provocar quando estiver em um time!`,
            player.id, errorColor, 'bold', HaxNotification.CHAT)
        return false;
    }  
    }

    if (msgArray[0][0] == '!') {
        let command = getCommand(msgArray[0].slice(1).toLowerCase());
        if (command != false && commands[command].roles <= getRole(player)) commands[command].function(player, message);
        else
            room.sendAnnouncement(
                `Este comando √© inv√°lido! Digite '!ajuda' para obter os comandos dispon√≠veis.`,
                player.id, errorColor, 'bold', HaxNotification.CHAT)
        return false;
    }

if (dono.includes(authArray[player.id])) {
    var stats = JSON.parse(localStorage.getItem(authArray[player.id]));
    room.sendAnnouncement(`${player.admin ? '„ÄåDONO„Äç' : tirouTagRank.includes(player.id) ? '' : rankTag} ${tirouTagVip.includes(player.id) ? '' : vipTag} ${player.name}: ${message}`, null, corChat != "" ? '0x' + corChat : 0xFF0046, fonte != "" ? fonte : 'bold', null, 1);
    return false;
}

if (gerente.includes(authArray[player.id])) {
    var stats = JSON.parse(localStorage.getItem(authArray[player.id]));
    room.sendAnnouncement(`${player.admin ? '„ÄåGERENTE„Äç ' : tirouTagRank.includes(player.id) ? '' : rankTag} ${tirouTagVip.includes(player.id) ? '' : vipTag} ${player.name}: ${message}`, null, corChat != "" ? '0x' + corChat : 0xFFFD00, fonte != "" ? fonte : 'bold', null, 1);
    return false
}

if (mods.includes(player.id)) {
    var stats = JSON.parse(localStorage.getItem(authArray[player.id]));
    room.sendAnnouncement(`${player.admin ? '„ÄåMOD„Äç' : tirouTagRank.includes(player.id) ? '' : rankTag} ${tirouTagVip.includes(player.id) ? '' : vipTag} ${player.name}: ${message}`, null, corChat != "" ? '0x' + corChat : 0x8600FF, fonte != "" ? fonte : 'bold', null, 1);
    return false;
}

if (adm.includes(player.id)) {
    var stats = JSON.parse(localStorage.getItem(authArray[player.id]));
    room.sendAnnouncement(`${player.admin ? '„ÄåAdmin„Äç' : tirouTagRank.includes(player.id) ? '' : rankTag} ${tirouTagVip.includes(player.id) ? '' : vipTag} ${player.name}: ${message}`, null, corChat != "" ? '0x' + corChat : 0x02FF00, fonte != "" ? fonte : 'bold', null, 1);
    return false;
}


    if (localStorage.getItem(authArray[player.id])) {
        var stats = JSON.parse(localStorage.getItem(authArray[player.id]));
        rankTag = stats.pontos >= 45 && stats.pontos < 100?"ü•â ìäàùêÅùê´ùê®ùêßùê≥ùêûìäâ":
        stats.pontos >= 100 && stats.pontos < 200?"ü•âü•â ìäàùêÅùê´ùê®ùêßùê≥ùêûìäâ":
        stats.pontos >= 200 && stats.pontos < 300?"ü•âü•âü•â ìäàùóïùóøùóºùóªùòáùó≤ìäâ":
        stats.pontos >= 300 && stats.pontos < 400?"ü•à ìäàùêèùê´ùêöùê≠ùêöìäâ":
        stats.pontos >= 400 && stats.pontos < 500?"ü•àü•à ìäàùêèùê´ùêöùê≠ùêöìäâ":
        stats.pontos >= 500 && stats.pontos < 600?"ü•àü•àü•à ìäàùêèùê´ùêöùê≠ùêöìäâ":
        stats.pontos >= 600 && stats.pontos < 700?"ü•á ìäàùêéùêÆùê´ùê®ìäâ":
        stats.pontos >= 700 && stats.pontos < 800?"ü•áü•á ìäàùêéùêÆùê´ùê®ìäâ":
        stats.pontos >= 800 && stats.pontos < 900?"ü•áü•áü•á ìäàùêéùêÆùê´ùê®ìäâ":
        stats.pontos >= 900 && stats.pontos < 1000?"‚öîÔ∏è ìäàùêèùê•ùêöùê≠ùê¢ùêßùêöìäâ":
        stats.pontos >= 1000 && stats.pontos < 1100?"‚öîÔ∏è‚öîÔ∏è ìäàùêèùê•ùêöùê≠ùê¢ùêßùêöìäâ":
        stats.pontos >= 1100 && stats.pontos < 1200?"‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è ìäàùêèùê•ùêöùê≠ùê¢ùêßùêöìäâ":        
        stats.pontos >= 1200 && stats.pontos < 1300?"üíé ìäàùêÉùê¢ùêöùê¶ùêöùêßùê≠ùêûìäâ":
        stats.pontos >= 1300 && stats.pontos < 1400?"üíéüíé ìäàùêÉùê¢ùêöùê¶ùêöùêßùê≠ùêûìäâ":
        stats.pontos >= 1400 && stats.pontos < 1500?"üíéüíéüíé ìäàùêÉùê¢ùêöùê¶ùêöùêßùê≠ùêûìäâ":
        stats.pontos >= 1500 && stats.pontos < 1600?"‚ö° ìäàùêëùêöùê¢ùê®ìäâ":
        stats.pontos >= 1600 && stats.pontos < 1700?"‚ö°‚ö° ìäàùêëùêöùê¢ùê®ìäâ":
        stats.pontos >= 1700 && stats.pontos < 1800?"‚ö°‚ö°‚ö° ìäàùêëùêöùê¢ùê®ìäâ":
        stats.pontos >= 1800 && stats.pontos < 1900?"‚ùÑÔ∏è ìäàùêÜùêûùê•ùêöùêùùê®ìäâ":
        stats.pontos >= 1900 && stats.pontos < 2000?"‚ùÑÔ∏è‚ùÑÔ∏è ìäàùêÜùêûùê•ùêöùêùùê®ìäâ":
        stats.pontos >= 2000 && stats.pontos < 2100?"‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è ìäàùêÜùêûùê•ùêöùêùùê®ìäâ":
        stats.pontos >= 2100 && stats.pontos < 2200?"üåü ìäàùêÑùê±ùê≠ùê´ùêûùê•ùêöùê´ìäâ":
        stats.pontos >= 2200 && stats.pontos < 2300?"üåüüåü ìäàùêÑùê±ùê≠ùê´ùêûùê•ùêöùê´ìäâ":
        stats.pontos >= 2300 && stats.pontos < 2400?"üåüüåüüåü ìäàùêÑùê±ùê≠ùê´ùêûùê•ùêöùê´ìäâ":
        stats.pontos >= 2400 && stats.pontos < 2500?"üëí ìäàùêçùê¢ùêØùêûùê• ùê•ùêÆùêüùêüùê≤ìäâ":
        stats.pontos >= 2500 && stats.pontos < 2600?"üëíüëí ìäàùêçùê¢ùêØùêûùê• ùê•ùêÆùêüùêüùê≤ìäâ":
        stats.pontos >= 2600 && stats.pontos < 2700?"üëíüëíüëí ìäàùêçùê¢ùêØùêûùê• ùê•ùêÆùêüùêüùê≤ìäâ":
        stats.pontos >= 2700 && stats.pontos < 2800?"üé© ìäàùêãùêûùêßùêùùêöìäâ":
        stats.pontos >= 2800 && stats.pontos < 2900?"üåçüî•üíßüå¨Ô∏èìäàùêÑùê•ùêûùê¶ùêûùêßùê≠ùêöùê´ìäâ":
        stats.pontos >= 2900 && stats.pontos < 3000?"üëΩ ìäàùóòùòÖùòÅùóøùóÆùòÅùó≤ùóøùóøùó≤ùòÄùòÅùóøùó≤ìäâ":
        stats.pontos >= 3000 && stats.pontos < 3100?"üçÅ ìäàùêèùê´ùê® ùêãùêûùêöùê†ùêÆùêûìäâ":
        stats.pontos >= 3100 && stats.pontos < 3200?"üèÜ ìäàùêçùê¢ùêØùêûùê• ùêöùêÆùê†ùêûìäâ":""
    }
        //ü•¥üíéüåÄüëΩü•âü•àü•áüí≤üëëüèÜ‚≠êüååüî•üåüü•∑üèºüóøüç∑ü´Öüèªüî•‚ôæÔ∏èü™ôü™µminhoca?

    if (message.length > 100 && player.admin == false &&  tipoVip < 3){
        room.sendAnnouncement("Voc√™ excedeu o limite de 100 caracteres! (Desbloqueie com VIP GOD)" ,player.id, errorColor, 'bold', 2);
        return false;
    }

    room.sendAnnouncement(`${confirm.includes(player.id) ? "[‚úîÔ∏è]" : "[‚ùå]"}${tirouTagRank.includes(player.id)?'':rankTag} ${tirouTagVip.includes(player.id)?'':vipTag} ${player.name}: ${message}`, null, corChat != ""?'0x'+corChat:0xE0E0E0, fonte !=  "" ? fonte : null, 1);
    return false
  }

room.onPlayerActivity = function (player) {
    if (gameState !== State.STOP) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
};


room.onPlayerBallKick = function (player) {
    if (playSituation != Situation.GOAL) {
        var ballPosition = room.getBallPosition();
        if (game.touchArray.length == 0 || player.id != game.touchArray[game.touchArray.length - 1].player.id) {
            if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
            lastTeamTouched = player.team;
            game.touchArray.push(
                new BallTouch(
                    player,
                    game.scores.time,
                    getGoalGame(),
                    ballPosition
                )
            );
            lastTouches[0] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 1,
                getGoalGame()
            );
            lastTouches[1] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 2,
                getGoalGame()
            );
        }
    }
};

function isBlacklisted(player){
    return blacklist.filter(b => b.Auth == player.auth || b.ipv4 == player.ipv4 || b.Conn == player.conn).length > 0;
}

function getDatehoras(){
    let data = new Date(),
    dia=data.getDate().toString().padStart(2, '0'),
    mes=(data.getMonth()+1).toString().padStart(2, '0'),
    horas=data.getHours().toString().padStart(2, '0'),
    minutos=data.getMinutes().toString().padStart(2, '0');
    return `${horas}:${minutos}`;
}
    
function getDateInfo(){
      let data = new Date(),
      dia=data.getDate().toString().padStart(2, '0'),
      mes=(data.getMonth()+1).toString().padStart(2, '0'),
      ano=data.getFullYear(),
      horas=data.getHours().toString().padStart(2, '0'),
      minutos=data.getMinutes().toString().padStart(2, '0');
      segundos=data.getSeconds().toString().padStart(2, '0');
      return `${dia} do ${mes} de ${ano}, √°s ${horas}:${minutos}:${segundos}`;
}
    
    
function dataehora(){
    let data = new Date(),
    dia=data.getDate().toString().padStart(2, '0'),
    mes=(data.getMonth()+1).toString().padStart(2, '0'),
    ano=data.getFullYear(),
    horas=data.getHours().toString().padStart(2, '0'),
    minutos=data.getMinutes().toString().padStart(2, '0');
    segundos=data.getSeconds().toString().padStart(2, '0');
    return `${dia}/${mes} de ${ano}, √°s ${horas}:${minutos} e ${segundos} segundos`;
}
    
    
function getDateInfo(){
        let data = new Date(),
        dia=data.getDate().toString().padStart(2, '0'),
        mes=(data.getMonth()+1).toString().padStart(2, '0'),
        ano=data.getFullYear(),
        horas=data.getHours().toString().padStart(2, '0'),
        minutos=data.getMinutes().toString().padStart(2, '0');
        segundos=data.getSeconds().toString().padStart(2, '0');
        return `${dia} do ${mes} de ${ano}, √°s ${horas}:${minutos}:${segundos}`;
}

/* GAME MANAGEMENT */

room.onGameStart = function (byPlayer) {
    if (byPlayer != null) clearTimeout(stopTimeout);
    game = new Game();
    possession = [0, 0];
    actionZoneHalf = [0, 0];
    gameState = State.PLAY;
    endGameVariable = false;
    goldenGoal = false;
    playSituation = Situation.KICKOFF;
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    teamRedStats = [];
    teamBlueStats = [];
    if (teamRed.length >= teamSize && teamBlue.length >= teamSize) {
        for (var i = 0; i < teamSize; i++) {
            teamRedStats.push(teamRed[i]);
            teamBlueStats.push(teamBlue[i]);
        }
    }
    calculateStadiumVariables();
};

room.onGameStop = function (byPlayer) {
    clearTimeout(stopTimeout);
    clearTimeout(unpauseTimeout);
    for (let player of teamRed) {
        room.setPlayerAvatar(player.id, null)
    }
    if (byPlayer != null) clearTimeout(startTimeout);
    //game.rec = room.stopRecording();
    if (
        !cancelGameVariable && game.playerComp[0].length + game.playerComp[1].length > 0 &&
        (
            (game.scores.timeLimit != 0 &&
                ((game.scores.time >= 0.5 * game.scores.timeLimit &&
                    game.scores.time < 0.75 * game.scores.timeLimit &&
                    game.scores.red != game.scores.blue) ||
                    game.scores.time >= 0.75 * game.scores.timeLimit)
            ) ||
            endGameVariable
        )
    ) {
        if (fetchRecordingVariable) {
            setTimeout((gameEnd) => { fetchRecording(gameEnd); }, 500, game);
        }
    }
    cancelGameVariable = false;
    gameState = State.STOP;
    playSituation = Situation.STOP;
    updateTeams();
    handlePlayersStop(byPlayer);
    handleActivityStop();
};

room.onGamePause = function (byPlayer) {
    if (mentionPlayersUnpause && gameState == State.PAUSE) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Jogo pausado por ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Jogo pausado!`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
    clearTimeout(unpauseTimeout);
    gameState = State.PAUSE;
};

room.onGameUnpause = function (byPlayer) {
    unpauseTimeout = setTimeout(() => {
        gameState = State.PLAY;
    }, 2000);
    if (mentionPlayersUnpause) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Jogo despausado por ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Jogo despausado!`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
    if (
        (teamRed.length == teamSize && teamBlue.length == teamSize && chooseMode) ||
        (teamRed.length == teamBlue.length && teamSpec.length < 2 && chooseMode)
    ) {
        deactivateChooseMode();
    }
};

room.onTeamGoal = function (team) {
    const scores = room.getScores();
    game.scores = scores;
    playSituation = Situation.GOAL;
    ballSpeed = getBallSpeed();
    var goalString = getGoalString(team);
    if(team == 1){
        for (let player of teamRed) {
            if(vips[authArray[player.id]] && vips[authArray[player.id]].avatarGol[0]){
                room.setPlayerAvatar(player.id, vips[authArray[player.id]].avatarGol[0])
            }else if(goalAttribution[0].name == player.name){
       
            }else if(goalAttribution[1]){
                if(goalAttribution[1].name == player.name){
  
                }
            }
        }
        for (let player of teamBlue) {
            if(vips[authArray[player.id]] && vips[authArray[player.id]].avatarGol[1]){
                room.setPlayerAvatar(player.id, vips[authArray[player.id]].avatarGol[1])
            }else if(goalAttribution[0].name == player.name){
  
            }

        }
    }else{
        for (let player of teamBlue) {
            if(vips[authArray[player.id]] && vips[authArray[player.id]].avatarGol[0]){
                room.setPlayerAvatar(player.id, vips[authArray[player.id]].avatarGol[0])
            }else if(goalAttribution[0].name == player.name){

            }else if(goalAttribution[1]){
                if(goalAttribution[1].name == player.name){
                }
            }
        }
        for (let player of teamRed) {
            if(vips[authArray[player.id]] && vips[authArray[player.id]].avatarGol[1]){
                room.setPlayerAvatar(player.id, vips[authArray[player.id]].avatarGol[1])
            }if(goalAttribution[0].name == player.name){
            }
        }
    }
    for (let player of teamRed) {
        var playerComp = getPlayerComp(player);
        team == Team.RED ? playerComp.goalsScoredTeam++ : playerComp.goalsConcededTeam++;
    }
    for (let player of teamBlue) {
        var playerComp = getPlayerComp(player);
        team == Team.BLUE ? playerComp.goalsScoredTeam++ : playerComp.goalsConcededTeam++;
    }
    room.sendAnnouncement(
        goalString,
        null,
        team == Team.RED ? redColor : blueColor,
        'bold',
        HaxNotification.CHAT
    );
    if ((scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit)) || goldenGoal) {
        endGame(team);
        goldenGoal = false;
        stopTimeout = setTimeout(() => {
            room.stopGame();
        }, 1000);
    }
};

room.onPositionsReset = function () {
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    playSituation = Situation.KICKOFF;
};

/* MISCELLANEOUS */

room.onRoomLink = function (url) {}

room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
    updateTeams();
    if (!changedPlayer.admin && getRole(changedPlayer) >= Role.MASTER) {
        room.setPlayerAdmin(changedPlayer.id, true);
        return;
    }
    updateAdmins(byPlayer != null && !changedPlayer.admin && changedPlayer.id == byPlayer.id ? changedPlayer.id : 0);
};

room.onKickRateLimitSet = function (min, rate, burst, byPlayer) {
    if (byPlayer != null) {
        room.sendAnnouncement(
            `N√£o √© permitido alterar o limite de kickrate. Deve ficar em "6-0-0".`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setKickRateLimit(6, 0, 0);
    }
};

room.onStadiumChange = function (newStadiumName, byPlayer) {
    if (byPlayer !== null) {
        if (getRole(byPlayer) < Role.MASTER && currentStadium != 'other') {
            room.sendAnnouncement(
                `Voc√™ n√£o pode mudar de est√°dio manualmente! Por favor, use os comandos do est√°dio.`,
                byPlayer.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
            stadiumCommand(emptyPlayer, `!${currentStadium}`);
        } else {
            room.sendAnnouncement(
                `Mapa alterado. Depois de terminar com este mapa, use os comandos do est√°dio.`,
                byPlayer.id,
                infoColor,
                'bold',
                HaxNotification.CHAT
            );
            currentStadium = 'other';
        }
    }
    checkStadiumVariable = true;
};

room.onGameTick = function () {
    checkTime();
    getLastTouchOfTheBall();
    getGameStats();
    handleActivity();
    }

setInterval(() => {
    room.sendAnnouncement(`Link do nosso discord: https://discord.gg/rqF5aDBnZJ`,
                null, announcementColor, 'bold', HaxNotification.CHAT)
}, 5 * 60 * 1000)

sendPasswordVip(false)
sendPasswordono(false)
sendPasswordmod(false)
sendPasswordgerente(false)
sendPasswordadmin(false)